
                              // Use a mapping for deal types
                              const dealTypeMap: Record<string, string> = {
                                standard_deal: "Standard Deal",
                                seasonal_promotion: "Seasonal Promotion",
                                annual_commitment: "Annual Commitment",
                                new_business: "New Business",
                                grow: "Grow", // Add missing value from the form
                              };

                              const result =
                                dealTypeMap[String(dealTypeValue)] ||
                                String(dealTypeValue);
                              console.log("Deal Type mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Sales Channel
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const salesChannelValue =
                                form.getValues("salesChannel");
                              console.log(
                                "Sales Channel value:",
                                salesChannelValue,
                              );
                              if (!salesChannelValue) return "Not provided";

                              // Use a mapping for sales channel
                              const salesChannelMap: Record<string, string> = {
                                client_direct: "Client Direct",
                                agency: "Agency",
                                independent_agency: "Independent Agency",
                              };

                              const result =
                                salesChannelMap[String(salesChannelValue)] ||
                                String(salesChannelValue);
                              console.log("Sales Channel mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            {salesChannel === "client_direct"
                              ? "Advertiser Name"
                              : "Agency Name"}
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {salesChannel === "client_direct"
                              ? String(
                                  form.getValues("advertiserName") ||
                                    "Not provided",
                                )
                              : String(
                                  form.getValues("agencyName") || "Not provided",
                                )}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Deal Structure
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const dealStructureValue =
                                form.getValues("dealStructure");
                              console.log(
                                "Deal Structure value:",
                                dealStructureValue,
                              );
                              if (!dealStructureValue) return "Not provided";

                              // Use a mapping for deal structure
                              const dealStructureMap: Record<string, string> = {
                                tiered: "Tiered",
                                flat_commit: "Flat Commitment",
                              };

                              const result =
                                dealStructureMap[String(dealStructureValue)] ||
                                String(dealStructureValue);
                              console.log("Deal Structure mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Contract Term
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("contractTerm")
                              ? `${form.getValues("contractTerm")} months`
                              : "Not provided"}
                          </dd>
                        </div>
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Business Summary
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("businessSummary")
                              ? String(form.getValues("businessSummary"))
                              : "Not provided"}
                          </dd>
                        </div>
                      </dl>
                    </div>
                  </div>

                  {/* Business Context Section */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden">
                    <div className="px-4 py-3 bg-slate-50 border-b border-slate-200">
                      <h3 className="text-sm font-medium text-slate-700">
                        Business Context
                      </h3>
                    </div>
                    <div className="p-4">
                      <dl className="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Growth Opportunity (MIQ)
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("growthOpportunityMIQ")
                              ? String(form.getValues("growthOpportunityMIQ"))
                              : "Not provided"}
                          </dd>
                        </div>

                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Growth Opportunity (Client)
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("growthOpportunityClient")
                              ? String(form.getValues("growthOpportunityClient"))
                              : "Not provided"}
                          </dd>
                        </div>
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Client Asks
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("clientAsks")
                              ? String(form.getValues("clientAsks"))
                              : "Not provided"}
                          </dd>
                        </div>
                      </dl>
                    </div>
                  </div>

                  {/* Deal Structure Summary */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden">
                    <div className="px-4 py-3 bg-slate-50 border-b border-slate-200">
                      <h3 className="text-sm font-medium text-slate-700">
                        Deal Structure Summary
                      </h3>
                    </div>
                    <div className="p-4">
                      {/* Financial Summary Table */}
                      {dealTiers.length > 0 && (
                        <div>
                          <div className="overflow-x-auto">
                            <table className="w-full border-collapse table-fixed text-sm">
                              <colgroup>
                                <col className="w-[30%]" />
                                <col className="w-[14%]" />
                                {dealTiers.map((tier) => (
                                  <col
                                    key={`col-review-${tier.tierNumber}`}
                                    className="w-[14%]"
                                  />
                                ))}
                              </colgroup>
                              <thead>
                                <tr>
                                  <th className="text-left p-2 bg-slate-100 border border-slate-200"></th>
                                  <th className="text-center p-2 bg-slate-100 border border-slate-200">
                                    Last Year
                                  </th>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => (
                                      <th
                                        key={tier.tierNumber}
                                        className="text-center p-2 bg-slate-100 border border-slate-200"
                                      >
                                        Tier {tier.tierNumber}
                                      </th>
                                    ))}
                                </tr>
                              </thead>
                              <tbody>
                                {/* Annual Revenue */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Annual Revenue
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(850000)}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => (
                                      <td
                                        key={tier.tierNumber}
                                        className="p-2 border border-slate-200 text-center"
                                      >
                                        {formatCurrency(
                                          tier.annualRevenue || 0,
                                        )}
                                      </td>
                                    ))}
                                </tr>

                                {/* Revenue Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Revenue Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Find previous year revenue for actual revenue growth calculation
                                      let previousYearRevenue = 850000; // Default to mock value
                                      const salesChannel =
                                        form.watch("salesChannel");
                                      const advertiserName =
                                        form.watch("advertiserName");
                                      const agencyName =
                                        form.watch("agencyName");

                                      if (
                                        salesChannel === "client_direct" &&
                                        advertiserName
                                      ) {
                                        const advertiser = advertisers.find(
                                          (a) => a.name === advertiserName,
                                        );
                                        if (
                                          advertiser &&
                                          advertiser.previousYearRevenue
                                        ) {
                                          previousYearRevenue =
                                            advertiser.previousYearRevenue;
                                        }
                                      } else if (
                                        (salesChannel === "holding_company" ||
                                          salesChannel ===
                                            "independent_agency") &&
                                        agencyName
                                      ) {
                                        const agency = agencies.find(
                                          (a) => a.name === agencyName,
                                        );
                                        if (
                                          agency &&
                                          agency.previousYearRevenue
                                        ) {
                                          previousYearRevenue =
                                            agency.previousYearRevenue;
                                        }
                                      }

                                      // Calculate actual revenue growth rate
                                      const revenueGrowthRate =
                                        previousYearRevenue > 0 &&
                                        tier.annualRevenue
                                          ? tier.annualRevenue /
                                              previousYearRevenue -
                                            1
                                          : 0;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              revenueGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(revenueGrowthRate * 100).toFixed(
                                              1,
                                            )}
                                            %
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Adjusted Gross Margin Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Adjusted Gross Margin Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Get previous year margin
                                      const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
                                      const previousYearMargin = dealCalculations.getPreviousYearMargin(currentSalesChannel, advertiserName, agencyName) / 100;
                                      // Calculate current tier margin
                                      const currentMargin =
                                        (tier.annualGrossMargin || 0) /
                                        100;
                                      // Calculate growth rate
                                      const marginGrowthRate =
                                        previousYearMargin > 0
                                          ? currentMargin / previousYearMargin -
                                            1
                                          : 0;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              marginGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(marginGrowthRate * 100).toFixed(
                                              1,
                                            )}
                                            %
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Adjusted Gross Profit Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Adjusted Gross Profit Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Calculate adjusted profit growth rate for this tier
                                      const profitGrowthRate =
                                        calculateAdjustedGrossProfitGrowthRate(tier);
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              profitGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {formatPercentage(profitGrowthRate)}
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Total Incentive Cost */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Total Incentive Cost
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(
                                      dealCalculations.getPreviousYearIncentiveCost(),
                                    )}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      const incentiveCost =
                                        calculateTierIncentiveCost(
                                          tier.tierNumber,
                                        );
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          {formatCurrency(incentiveCost)}
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Total Client Value */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Total Client Value
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(850000 * 0.4)} {/* 40% of last year's revenue */}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Using a fixed calculation for client value as 40% of revenue
                                      const clientValue =
                                        (tier.annualRevenue || 0) * 0.4;
                                      
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          {formatCurrency(clientValue)}
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Client Value Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Client Value Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Using a fixed calculation for client value as 40% of revenue
                                      const clientValue =
                                        (tier.annualRevenue || 0) * 0.4;
                                      const lastYearValue = 850000 * 0.4; // 40% of last year's revenue
                                      const growthRate =
                                        clientValue / lastYearValue - 1;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              growthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(growthRate * 100).toFixed(1)}%
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>
                                
                                {/* Incentive Cost Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Incentive Cost Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Get previous year incentive cost
                                      const previousYearCost = dealCalculations.getPreviousYearIncentiveCost();
                                      // Calculate current tier incentive cost
                                      const currentCost = calculateTierIncentiveCost(tier.tierNumber);
                                      // Calculate growth rate
                                      const costGrowthRate = 
                                        previousYearCost > 0 
                                          ? currentCost / previousYearCost - 1 
                                          : 0;
                                          
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              costGrowthRate > 0
                                                ? "text-red-600"  // Higher cost is shown in red
                                                : "text-green-600" // Lower cost is shown in green
                                            }
                                          >
                                            {(costGrowthRate * 100).toFixed(1)}%
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* DealGenie AI Assessment */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden bg-gradient-to-r from-purple-50 to-slate-50">
                    <div className="px-4 py-3 bg-gradient-to-r from-purple-100 to-slate-100 border-b border-slate-200 flex items-center justify-between">
                      <h3 className="text-sm font-semibold text-slate-800 flex items-center">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 mr-2 text-purple-600"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                          />
                        </svg>
                        DealGenie AI Assessment
                      </h3>
                      <span className="inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800">
                        AI-Powered
                      </span>
                    </div>
                    <div className="p-5">
                      {/* AI Analysis Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-yellow-400 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Deal Classification
                          </h4>
                        </div>
                        <div className="flex items-center mb-4">
                          <span className="inline-flex items-center rounded-full bg-yellow-50 px-3 py-1 text-sm font-medium text-yellow-800 mr-3">
                            Non-Standard Deal
                          </span>
                          <span className="text-sm text-slate-500">
                            Manual review required
                          </span>
                        </div>
                        <p className="text-sm text-slate-700 mb-3">
                          This deal falls outside standard guidelines for the
                          following reasons:
                        </p>
                        <ul className="list-disc pl-5 text-sm text-slate-700 space-y-1 mb-3">
                          <li>
                            Incentive structure exceeds standard thresholds
                          </li>
                          <li>
                            Tiered revenue structure with potential margin
                            impact
                          </li>
                          <li>
                            Growth rate projections exceed benchmark ranges
                          </li>
                        </ul>
                      </div>

                      {/* AI Insights Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-purple-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Deal Structure Analysis
                          </h4>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                          <div className="p-3 bg-slate-50 rounded-md">
                            <div className="text-sm font-medium text-slate-700 mb-1">
                              Profitability Impact
                            </div>
                            <div className="text-xl font-semibold">
                              {(() => {
                                // Use the first tier's profit growth rate calculation
                                if (
                                  dealTiers.length > 0 &&
                                  dealTiers[0].annualRevenue
                                ) {
                                  const profitGrowthRate =
                                    calculateAdjustedGrossProfitGrowthRate(
                                      dealTiers[0],
                                    );
                                  const formattedRate = (
                                    profitGrowthRate * 100
                                  ).toFixed(1);
                                  const isPositive = profitGrowthRate > 0;
                                  return (
                                    <span
                                      className={
                                        isPositive
                                          ? "text-green-600"
                                          : "text-red-600"
                                      }
                                    >
                                      {isPositive ? "+" : ""}
                                      {formattedRate}%
                                    </span>
                                  );
                                }
                                return (
                                  <span className="text-slate-700">N/A</span>
                                );
                              })()}
                            </div>
                            <div className="text-xs text-slate-500">
                              vs. Last Year
                            </div>
                          </div>
                          <div className="p-3 bg-slate-50 rounded-md">
                            <div className="text-sm font-medium text-slate-700 mb-1">
                              Revenue Growth
                            </div>
                            <div className="text-xl font-semibold">
                              {(() => {
                                // Use the first tier's revenue growth rate calculation - using the correct growth function
                                if (
                                  dealTiers.length > 0 &&
                                  dealTiers[0].annualRevenue
                                ) {
                                  // Get previous year revenue
                                  let previousYearRevenue = 850000; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearRevenue
                                    ) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearRevenue) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue;
                                    }
                                  }

                                  // Calculate growth rate
                                  const revenueGrowthRate =
                                    previousYearRevenue > 0 &&
                                    dealTiers[0].annualRevenue
                                      ? dealTiers[0].annualRevenue /
                                          previousYearRevenue -
                                        1
                                      : 0;

                                  const formattedRate = (
                                    revenueGrowthRate * 100
                                  ).toFixed(1);
                                  const isPositive = revenueGrowthRate > 0;
                                  return (
                                    <span
                                      className={
                                        isPositive
                                          ? "text-green-600"
                                          : "text-red-600"
                                      }
                                    >
                                      {isPositive ? "+" : ""}
                                      {formattedRate}%
                                    </span>
                                  );
                                }
                                return (
                                  <span className="text-slate-700">N/A</span>
                                );
                              })()}
                            </div>
                            <div className="text-xs text-slate-500">
                              vs. Last Year
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-slate-700">
                          {(() => {
                            if (
                              dealTiers.length > 0 &&
                              dealTiers[0].annualRevenue
                            ) {
                              const profitGrowthRate =
                                calculateAdjustedGrossProfitGrowthRate(
                                  dealTiers[0],
                                );

                              // Get previous year revenue for actual revenue growth calculation
                              let previousYearRevenue = 850000; // Default to mock value
                              const salesChannel = form.watch("salesChannel");
                              const advertiserName =
                                form.watch("advertiserName");
                              const agencyName = form.watch("agencyName");

                              if (
                                salesChannel === "client_direct" &&
                                advertiserName
                              ) {
                                const advertiser = advertisers.find(
                                  (a) => a.name === advertiserName,
                                );
                                if (
                                  advertiser &&
                                  advertiser.previousYearRevenue
                                ) {
                                  previousYearRevenue =
                                    advertiser.previousYearRevenue;
                                }
                              } else if (
                                (salesChannel === "holding_company" ||
                                  salesChannel === "independent_agency") &&
                                agencyName
                              ) {
                                const agency = agencies.find(
                                  (a) => a.name === agencyName,
                                );
                                if (agency && agency.previousYearRevenue) {
                                  previousYearRevenue =
                                    agency.previousYearRevenue;
                                }
                              }

                              // Calculate actual revenue growth rate
                              const revenueGrowthRate =
                                previousYearRevenue > 0 &&
                                dealTiers[0].annualRevenue
                                  ? dealTiers[0].annualRevenue /
                                      previousYearRevenue -
                                    1
                                  : 0;

                              if (
                                revenueGrowthRate > 0 &&
                                profitGrowthRate < 0
                              ) {
                                return "The proposed structure offers higher revenue growth but with reduced profitability compared to standard deals. Consider adjusting tier thresholds or incentive amounts.";
                              } else if (
                                revenueGrowthRate > 0 &&
                                profitGrowthRate > 0
                              ) {
                                return "This deal structure shows positive growth in both revenue and profitability, though the approval matrix indicates additional oversight required.";
                              } else if (revenueGrowthRate < 0) {
                                return "This deal structure shows a revenue decrease compared to last year. Recommend revisiting revenue targets before submission.";
                              }
                            }

                            return "Unable to analyze deal structure with the current data. Please ensure all tier values are completed.";
                          })()}
                        </p>
                      </div>

                      {/* Approval Workflow Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-blue-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Required Approval Workflow
                          </h4>
                        </div>
                        <div className="flex flex-wrap gap-2 mb-3">
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
                              />
                            </svg>
                            Finance Team
                          </div>
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                              />
                            </svg>
                            Regional Director
                          </div>
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                              />
                            </svg>
                            Legal Review
                          </div>
                        </div>
                        <div className="text-sm text-slate-700">
                          <p>
                            Estimated approval time:{" "}
                            <span className="font-medium">
                              3-5 business days
                            </span>
                          </p>
                        </div>
                      </div>

                      {/* Recommendations Section */}
                      <div className="bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-green-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Recommendations
                          </h4>
                        </div>
                        <ul className="space-y-2">
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Consider adjusting Tier 1 incentive to stay within
                              standard margin parameters
                            </span>
                          </li>
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Include a quarterly performance review clause to
                              re-evaluate tiers
                            </span>
                          </li>
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Prepare detailed business justification for
                              non-standard incentive structure
                            </span>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-8 flex justify-between">
                  <Button type="button" variant="outline" onClick={prevStep}>
                    Previous: Deal Structure
                  </Button>
                  <Button 
                    type="button" 
                    disabled={submitDealMutation.isPending}
                    onClick={() => {
                      console.log("Submit button clicked");
                      
                      // Generate a sample deal submission
                      const formValues = form.getValues();
                      
                      // Set a sample deal name for testing
                      const dealName = "Test Deal " + new Date().toISOString();
                      
                      // Use actual form dates (they should be properly set by now)
                      const startDate = formValues.termStartDate || new Date();
                      const endDate = formValues.termEndDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);

                      // Create a complete object with all required fields
                      const dealData = {
                        dealName,
                        dealType: formValues.dealType || "grow",
                        region: formValues.region || "midwest", 
                        salesChannel: formValues.salesChannel || "independent_agency",
                        businessSummary: formValues.businessSummary || "Test business summary",
                        advertiserName: formValues.advertiserName || "Test Advertiser",
                        agencyName: formValues.agencyName || "Test Agency",
                        termStartDate: startDate,
                        termEndDate: endDate,
                        annualRevenue: Number(formValues.annualRevenue) || 0,
                        annualGrossMargin: Number(formValues.annualGrossMargin) || 0,
                        dealStructure: dealStructureType || "tiered",
                        dealTiers: dealTiers,
                        selectedIncentives: selectedIncentives,
                        tierIncentives: tierIncentives,
                        status: "pending_approval"
                      };
                      
                      // Submit directly to the API
                      try {
                        console.log("Submitting deal data:", dealData);
                        submitDealMutation.mutate(dealData);
                        toast({
                          title: "Deal Submitted",
                          description: "Your deal has been submitted for approval",
                        });
                      } catch (error) {
                        console.error("Error submitting deal:", error);
                        toast({
                          title: "Submission Error",
                          description: "There was an error submitting your deal. Please try again.",
                          variant: "destructive",
                        });
                      }
                    }}
                  >
                    {submitDealMutation.isPending
                      ? "Submitting..."
                      : "Submit Deal for Approval"}
                  </Button>
                </div>
              </CardContent>
            )}
          </form>
        </Form>
      </Card>
    </div>
  );
}
