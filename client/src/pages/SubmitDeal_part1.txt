import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { useLocation } from "wouter";
// Date formatting no longer needed - using ISO 8601 strings directly
import { Info } from "lucide-react";
import { FormSectionHeader, FormProgressTracker, FormHelpPopover, StyledFormField, FormStyles } from "@/components/ui/form-style-guide";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  formatCurrency,
  formatPercentage,
  calculateMonthlyValue,
  calculateNetValue,
  calculateProfit,
  calculateProfitMargin,
  calculateYOYGrowth,
  calculateIncentiveImpact,
  calculateDealFinancialSummary,
  calculateGrossMarginValue,
  calculateTierContribution,
  calculateEffectiveDiscountRate,
  type DealFinancialSummary,
  cn,
} from "@/lib/utils";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox";
import {
  ApprovalAlert,
  ApprovalHelpText,
  StandardDealCriteriaHelp,
} from "@/components/ApprovalAlert";
import { ApprovalRule } from "@/lib/approval-matrix";
import { Plus, Trash2 } from "lucide-react";
import { IncentiveSelector } from "@/components/IncentiveSelector";
import {
  type SelectedIncentive,
  incentiveCategories,
} from "@/lib/incentive-data";
import { useIncentiveSelection } from "@/hooks/useIncentiveSelection";
import TierSpecificIncentives, {
  type TierIncentive,
} from "@/components/TierSpecificIncentives";

import { ApprovalMatrixDisplay } from "@/components/deal-form/ApprovalMatrixDisplay";
import { ClientInfoSection } from "@/components/shared/ClientInfoSection";
import { DealDetailsSection } from "@/components/deal-form/DealDetailsSection";

import { IncentiveStructureSection } from "@/components/deal-form/IncentiveStructureSection";
import { ReviewSubmitSection } from "@/components/deal-form/ReviewSubmitSection";
import { BusinessContextSection } from "@/components/deal-form/BusinessContextSection";
import { useDealCalculations } from "@/hooks/useDealCalculations";
import { DataMappingService } from "@/services/dataMappingService";
import { useAIAnalysis } from "@/hooks/useAIAnalysis";
import { AIAnalysisCard } from "@/components/ai/AIAnalysisCard";
import { useDealTiers, type DealTier } from "@/hooks/useDealTiers";
import { useDealFormValidation, type DealFormData } from "@/hooks/useDealFormValidation";

import { migrateLegacyTiers, toLegacyFormat } from "@/lib/tier-migration";
import { DEAL_CONSTANTS, INCENTIVE_CONSTANTS, FORM_CONSTANTS } from "@/config/businessConstants";

// Simplified deal schema with only essential fields
// Simplified schema - fields now handled by shared components
const dealFormSchema = z.object({
  // Business summary is in ReviewSubmitSection
  businessSummary: z.string().optional(),
  
  // Business Context fields (required for SubmitDeal)
  growthOpportunityMIQ: z.string().min(1, "Growth Opportunity (MIQ) is required"),
  growthOpportunityClient: z.string().min(1, "Growth Opportunity (Client) is required"),
  clientAsks: z.string().min(1, "Client Asks is required"),
  
  // Optional fields that may come from shared components
  growthAmbition: z.number().optional(),
  contractTermMonths: z.number().optional(),
  
  // Essential financial data for calculations
  annualRevenue: z.coerce.number().positive("Annual revenue must be positive").optional(),
  annualGrossMarginPercent: z.coerce.number().min(0).max(100, "Annual gross margin must be between 0 and 100%").optional(),
  
  // System fields
  status: z.string().default("submitted"),
  referenceNumber: z.string().optional(),
}).passthrough(); // Allow any fields from shared components

type DealFormValues = any; // Allow any fields from shared components

export default function SubmitDeal() {
  // ✅ MIGRATED: Form step now managed by formValidation hook
  // const [formStep, setFormStep] = useState(0); // REPLACED
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const [currentApprover, setCurrentApprover] = useState<ApprovalRule | null>(
    null,
  );
  const [dealStructureType, setDealStructure] = useState<
    "tiered" | "flat_commit" | ""
  >("");
  const [financialSummary, setFinancialSummary] =
    useState<DealFinancialSummary>({
      totalAnnualRevenue: 0,
      totalGrossMargin: 0,
      averageGrossMarginPercent: 0,
      totalIncentiveValue: 0,
      effectiveDiscountRate: 0,
      monthlyValue: 0,
      yearOverYearGrowth: 0,
      projectedNetValue: 0,
    });

  // ✅ Phase 2.3: Legacy helper functions removed - using form.watch() and form.getValues() directly

  // Handle approval level changes
  const handleApprovalChange = (level: string, approvalInfo: ApprovalRule) => {
    setCurrentApprover(approvalInfo);
  };

  // ✅ Phase 2.2: Updated to use hook actions
  const handleIncentiveChange = (incentives: SelectedIncentive[]) => {
    incentiveManager.clearAllIncentives();
    incentives.forEach(incentive => incentiveManager.addSelectedIncentive(incentive));
  };

  const handleTierIncentiveChange = (incentives: TierIncentive[]) => {
    incentives.forEach(incentive => incentiveManager.addTierIncentive(incentive));
  };

  // State to track selected agencies and advertisers for dropdowns
  const [agencies, setAgencies] = useState<AgencyData[]>([]);
  const [advertisers, setAdvertisers] = useState<AdvertiserData[]>([]);

  // Initialize calculation service with current advertiser/agency data
  const dealCalculations = useDealCalculations(advertisers, agencies);

  // Type definitions for advertisers and agencies (simplified)
  interface AdvertiserData {
    id: number;
    name: string;
    region: string;
    // Historical fields - maintained in interface for API compatibility
    // but not used in the simplified UI implementation
    previousYearRevenue?: number;
    previousYearMargin?: number;
  }

  interface AgencyData {
    id: number;
    name: string;
    type: string;
    region: string;
    // Historical fields - maintained in interface for API compatibility
    // but not used in the simplified UI implementation
    previousYearRevenue?: number;
    previousYearMargin?: number;
  }

  // ✅ PHASE 2.3: Legacy interface removal target
  // This DealTier interface should be removed once all references are migrated to DealTier

  // ✅ NEW: Using tierManager hook instead of manual state
  // dealTiers replaced by tierManager.tiers

  // ✅ Phase 2.2: Migrated incentive state to useIncentiveSelection hook
  const incentiveManager = useIncentiveSelection();
  const { 
    selectedIncentives, 
    tierIncentives, 
    showAddIncentiveForm
  } = incentiveManager;

  // Initialize the form
  const form = useForm<DealFormValues>({
    resolver: zodResolver(dealFormSchema),
    defaultValues: {
      // Basic deal information
      dealType: "grow",

      // Business information
      businessSummary: "",

      // Growth opportunity fields (partial move from RequestSupport)
      growthOpportunityMIQ: "",
      growthOpportunityClient: "",
      clientAsks: "",
      
      // Optional RequestSupport fields
      growthAmbition: 0,
      contractTermMonths: 12,

      // Client/Agency information
      salesChannel: undefined,
      region: undefined,
      advertiserName: "",
      agencyName: "",

      // Deal structure
      dealStructure: undefined,

      // Timeframe - ISO 8601 strings
      termStartDate: new Date().toISOString().split('T')[0],
      termEndDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],

      // Financial data (simplified)
      annualRevenue: 0,
      annualGrossMargin: 0,

      // Contact information
      email: "",

      // Status
      status: "submitted",
      referenceNumber: `DEAL-${new Date().getFullYear()}-${Math.floor(Math.random() * 10000)}`,
    },
  });

  // AI Analysis Integration
  const aiAnalysis = useAIAnalysis();
  
  // Unified tier management using useDealTiers hook
  const tierManager = useDealTiers({
    maxTiers: 5,
    minTiers: 1
  });
  
  // Use tierManager.tiers as dealTiers for backward compatibility
  const dealTiers = tierManager.tiers;
  const setDealTiers = (tiers: DealTier[]) => tierManager.updateAllTiers(tiers);
  
  const formValidation = useDealFormValidation(form, {
    enableAutoAdvance: false,
    validateOnChange: true,
    formType: 'submitDeal' // ✅ SYNCHRONIZED: Use SubmitDeal form steps
  });
  
  // ✅ MIGRATED: Use hook-managed form step instead of local state
  const formStep = formValidation.currentStep - 1; // Convert from 1-based to 0-based indexing
  
  // Removed complex tier manager - using simple state management
  
  // Trigger AI analysis when critical deal data changes
  React.useEffect(() => {
    const currentDealName = String(form.watch("dealName") || "");
    const currentSalesChannel = String(form.watch("salesChannel") || "");
    const currentRegion = String(form.watch("region") || "");
    
    if (formStep >= 2 && currentDealName && currentSalesChannel && currentRegion) {
      const dealData = {
        dealType: String(form.watch("dealType") || ""),
        salesChannel: currentSalesChannel,
        region: currentRegion,
        advertiserName: String(form.watch("advertiserName") || ""),
        agencyName: String(form.watch("agencyName") || ""),
        dealStructure: dealStructureType,
        annualRevenue: Number(form.watch("annualRevenue") || 0),
        contractTermMonths: String(form.watch("contractTermMonths") || ""),
        termStartDate: String(form.watch("termStartDate") || ""),
        termEndDate: String(form.watch("termEndDate") || ""),
        businessSummary: String(form.watch("businessSummary") || "")
      };
      
      if (dealData.annualRevenue > 0 && dealData.termStartDate && dealData.termEndDate) {
        aiAnalysis.triggerAnalysis(dealData);
      }
    }
  }, [formStep, dealStructureType, aiAnalysis]);

  // Financial calculation helper functions - now using extracted service

  // Helper functions that use the calculation service
  // ✅ PHASE 1 COMPLETE: Eliminated 8 pure wrapper functions (~50 lines)
  // Direct service calls replace all wrapper function usage
  
  // Helper to get advertiser/agency names for calculations
  const getClientNames = () => ({
    advertiserName: String(form.watch("advertiserName") || ""),
    agencyName: String(form.watch("agencyName") || ""),
    salesChannel: String(salesChannel || "")
  });

  const calculateTierIncentiveCost = (tierNumber: number): number => {
    return dealCalculations.calculateTierIncentiveCost(tierNumber, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 2: Replace duplicate logic with service calls
  const calculateTierGrossProfit = (tier: DealTier): number => {
    // Use DealTier directly with service
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateTierGrossProfit(serviceTier, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 2: Replace with service call  
  const calculateRevenueGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateRevenueGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // Calculate gross margin growth rate using the service
  const calculateGrossMarginGrowthRate = (tier: DealTier): number => {
    const advertiserName = String(form.watch("advertiserName") || "");
    const agencyName = String(form.watch("agencyName") || "");
    
    // Convert DealTier to DealTier format expected by service
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    
    return dealCalculations.calculateGrossMarginGrowthRate(serviceTier, String(salesChannel || ""), advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateGrossProfitGrowthRate
  const calculateGrossProfitGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateGrossProfitGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossProfitGrowthRate
  const calculateAdjustedGrossProfitGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossProfitGrowthRate(serviceTier, selectedIncentives, tierIncentives, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossMargin  
  const calculateAdjustedGrossMargin = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossMargin(serviceTier, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossMarginGrowthRate
  const calculateAdjustedGrossMarginGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossMarginGrowthRate(serviceTier, selectedIncentives, tierIncentives, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 2: Replace with service call
  const calculateClientValue = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateClientValue(serviceTier);
  };

  // ✅ PHASE 3: Migrated to service - calculateClientValueGrowthRate
  const calculateClientValueGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateClientValueGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateCostGrowthRate
  const calculateCostGrowthRate = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateCostGrowthRate(serviceTier, selectedIncentives, tierIncentives);
  };

  // Watch for dealStructure changes to handle conditional fields
  
  // Mutation for submitting the deal
  const submitDealMutation = useMutation({
    mutationFn: async (data: DealFormValues) => {
      console.log("Sending data to API:", data);
      return apiRequest("/api/deals", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
    },
    onSuccess: () => {
      console.log("Deal submission successful!");
      queryClient.invalidateQueries({ queryKey: ["/api/deals"] });
      toast({
        title: "Success",
        description: "Deal submitted successfully!",
        variant: "default",
      });
      navigate("/");
    },
    onError: (error: any) => {
      console.error("Deal submission error:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to submit deal",
        variant: "destructive",
      });
    },
  });

  // Fetch agencies and advertisers for dropdowns
  useEffect(() => {
    const fetchAgencies = async () => {
      try {
        const data = await apiRequest("/api/agencies");
        setAgencies(data);
      } catch (error) {
        console.error("Failed to fetch agencies:", error);
        toast({
          title: "Error",
          description: "Failed to load agencies data",
          variant: "destructive",
        });
      }
    };

    const fetchAdvertisers = async () => {
      try {
        const data = await apiRequest("/api/advertisers");
        setAdvertisers(data);
      } catch (error) {
        console.error("Failed to fetch advertisers:", error);
        toast({
          title: "Error",
          description: "Failed to load advertisers data",
          variant: "destructive",
        });
      }
    };

    fetchAgencies();
    fetchAdvertisers();
  }, [toast]);

  // Watch for salesChannel and dealStructure changes to handle conditional fields
  const salesChannel = form.watch("salesChannel");
  const dealStructureValue = form.watch("dealStructure");

  // Update dealStructureType when form value changes
  useEffect(() => {
    if (dealStructureValue) {
      setDealStructure(dealStructureValue as "tiered" | "flat_commit");
    }
  }, [dealStructureValue]);

  // Auto-populate region when selecting advertiser or agency
  useEffect(() => {
    const updateRegionData = async () => {
      const advertiserName = form.getValues("advertiserName");
      const agencyName = form.getValues("agencyName");

      if (salesChannel === "client_direct" && advertiserName) {
        const advertiser = advertisers.find(
          (a: AdvertiserData) => a.name === advertiserName,
        );
        if (advertiser) {
          // Only set the region value
          const regionValue =
            (advertiser?.region as
              | "northeast"
              | "midwest"
              | "midatlantic"
              | "west"
              | "south") || "northeast";
          form.setValue("region", regionValue);
        }
      } else if (
        (salesChannel === "holding_company" ||
          salesChannel === "independent_agency") &&
        agencyName
      ) {
        const agency = agencies.find((a: AgencyData) => a.name === agencyName);
        if (agency) {
          // Only set the region value
          const regionValue =
            (agency?.region as
              | "northeast"
              | "midwest"
              | "midatlantic"
              | "west"
              | "south") || "northeast";
          form.setValue("region", regionValue);
        }
      }
    };

    updateRegionData();
  }, [salesChannel, agencies, advertisers]);

  // Calculate real-time financial impact using dealTiers
  useEffect(() => {
    // Get fresh values from form without causing re-renders
    const getFormData = () => {
      const startDateStr = form.getValues("termStartDate") as string;
      const endDateStr = form.getValues("termEndDate") as string;
      const advertiserName = form.getValues("advertiserName") as string;
      const agencyName = form.getValues("agencyName") as string;
      return { startDateStr, endDateStr, advertiserName, agencyName };
    };
    
    const { startDateStr, endDateStr, advertiserName, agencyName } = getFormData();
    
    // Calculate contract term from ISO 8601 date strings
    let contractTerm = 12; // Default to 12 months
    if (startDateStr && endDateStr) {
      const startDate = new Date(startDateStr);
      const endDate = new Date(endDateStr);
      contractTerm = Math.max(1, (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth()));
    }

    // Find the previous year revenue for YoY calculations
    let previousYearRevenue = 0;

    if (salesChannel === "client_direct" && advertiserName) {
      const advertiser = advertisers.find((a) => a.name === advertiserName);
      if (advertiser && advertiser.previousYearRevenue) {
        previousYearRevenue = advertiser.previousYearRevenue;
      }
    } else if (
      (salesChannel === "holding_company" ||
        salesChannel === "independent_agency") &&
      agencyName
    ) {
      const agency = agencies.find((a) => a.name === agencyName);
      if (agency && agency.previousYearRevenue) {
        previousYearRevenue = agency.previousYearRevenue;
      }
    }

    // Calculate financial summary using dealTiers
    const summary = calculateDealFinancialSummary(
      dealTiers,
      contractTerm,
      previousYearRevenue,
    );

    // Update the financial summary state
    setFinancialSummary(summary);
  }, [dealTiers, salesChannel, advertisers, agencies]);

  // ✅ MIGRATED: Form navigation now handled by formValidation hook
  // Legacy functions replaced with hook methods:
  // validateAndGoToStep → formValidation.goToStep
  // nextStep → formValidation.goToNextStep  
  // prevStep → formValidation.goToPreviousStep

  const nextStep = () => {
    const success = formValidation.goToNextStep();
    if (!success && formValidation.currentStepValidation.errors.length > 0) {
      toast({
        title: "Validation Error",
        description: formValidation.currentStepValidation.errors[0],
        variant: "destructive",
      });
    }
  };

  const prevStep = () => {
    formValidation.goToPreviousStep();
  };

  const validateAndGoToStep = (targetStep: number): boolean => {
    const success = formValidation.goToStep(targetStep + 1); // Convert to 1-based indexing
    if (!success && formValidation.currentStepValidation.errors.length > 0) {
      toast({
        title: "Validation Error", 
        description: formValidation.currentStepValidation.errors[0],
        variant: "destructive",
      });
    }
    return success;
  };

  function onSubmit(data: any) {
    console.log("Form submission triggered with data:", data);
    
    // Check for missing fields
    if (!data.dealType || !data.salesChannel || !data.region) {
      console.error("Missing required fields in form submission");
      toast({
        title: "Form Error",
        description: "Missing required basic information. Please check all required fields.",
        variant: "destructive",
      });
      return;
    }
    
    if (!data.termStartDate || !data.termEndDate) {
      console.error("Missing deal term dates");
      toast({
        title: "Form Error",
        description: "Please set both start and end dates for the deal.",
        variant: "destructive",
      });
      return;
    }
  
    // Format dates for deal name - using ISO strings  
    const startDateFormatted = data.termStartDate.replace(/-/g, '');
    const endDateFormatted = data.termEndDate.replace(/-/g, '');

    // Determine client/agency name
    let clientName = "";
    if (data.salesChannel === "client_direct" && data.advertiserName) {
      clientName = data.advertiserName;
    } else if (
      (data.salesChannel === "holding_company" ||
        data.salesChannel === "independent_agency") &&
      data.agencyName
    ) {
      clientName = data.agencyName;
    } else {
      console.error("No client/agency name found");
      toast({
        title: "Form Error",
        description: "Please select a client or agency based on your sales channel.",
        variant: "destructive",
      });
      return;
    }

    // Generate deal name format:
    // Deal Type_Sales Channel_Advertiser Name/Agency Name_Deal Structure_Deal Start Date-Deal End Date
    // ✅ MIGRATED: Using business constants instead of hardcoded maps

    // Generate deal name using the data mapping service
    const dealName = DataMappingService.generateDealName({
      dealType: data.dealType,
      salesChannel: data.salesChannel,
      dealStructure: data.dealStructure,
      advertiserName: data.advertiserName,
      agencyName: data.agencyName,
      termStartDate: data.termStartDate,
      termEndDate: data.termEndDate
    });

    // Include generated deal name, deal tiers data for tiered structure, and selected incentives
    const dealData = {
      ...data,
      dealName: dealName,
      // Add missing required fields for API compatibility
      annualRevenue: data.annualRevenue || DEAL_CONSTANTS.DEFAULT_ANNUAL_REVENUE,
      annualGrossMargin: (data.annualGrossMarginPercent || DEAL_CONSTANTS.DEFAULT_GROSS_MARGIN * 100) / 100,
      // Only include dealTiers if the structure is tiered
      ...(dealStructureType === "tiered" ? { dealTiers: dealTiers } : {}),
      // Include selected incentives
      selectedIncentives,
      // Include tier-specific incentives
      tierIncentives,
    };

    submitDealMutation.mutate(dealData);
  }

  return (
    <div className="p-6">
      <FormSectionHeader
        title="Deal Submission"
        description="Complete the form below to submit a new commercial deal for approval"
        badge="Step 2 of 2"
        helpTitle="About Deal Submission"
        helpContent={
          <>
            <p className="text-sm text-slate-700">
              The deal submission process involves 3 steps:
            </p>
            <ol className={FormStyles.help.list}>
              <li>Complete deal details and basic client information</li>
              <li>Configure deal structure, pricing tiers, and incentives</li>
              <li>Review and submit for approval based on approval matrix</li>
            </ol>
            <p className="text-sm text-slate-700 mt-2">
              Required approvals will be automatically determined based on
              deal size, structure, and non-standard terms.
            </p>
          </>
        }
      />

      {/* Form Progress - Using standardized component */}
      <FormProgressTracker
        steps={[
          { id: 0, label: "Deal Overview" },
          { id: 1, label: "Business Context" },
          { id: 2, label: "Value Structure" },
          { id: 3, label: "Review & Submit" },
        ]}
        currentStep={formStep}
        onStepClick={(stepId) => {
          const step = Number(stepId);
          if (step === 0) {
            prevStep();
          } else if (step > formStep) {
            formValidation.goToNextStep(); // Use hook's navigation
          } else {
            formValidation.goToStep(step + 1); // Convert to 1-based indexing for hook
          }
        }}
      />

      {/* Form Container */}
      <Card>
        <Form {...form}>
          <form onSubmit={(e) => {
            e.preventDefault();
            console.log("Form submit event triggered");
            form.handleSubmit(onSubmit)(e);
          }}>
            {/* Step 1: Deal Overview - Using clean direct component structure */}
            {formStep === 0 && (
              <>
                {/* Client Information Section */}
                <CardContent className="p-6 border-b">
                  <FormSectionHeader
                    title="Client Information"
                    description="Select the client and sales channel for this deal"
                  />
                  <div className="mt-6">
                    <ClientInfoSection
                      form={form}
                      agencies={agencies}
                      advertisers={advertisers}
                      salesChannel={String(salesChannel || "")}
                      layout="grid"
                    />
                  </div>
                </CardContent>

                {/* Deal Details Section */}
                <DealDetailsSection
                  form={form}
                  dealStructureType={dealStructureType}
                  setDealStructure={setDealStructure}
                  nextStep={nextStep}
                />
              </>
            )}

            {/* ORIGINAL FORM STRUCTURE FOR REFERENCE - Using extracted component above */}
            {false && formStep === 0 && (
              <CardContent className="p-6">
                <FormSectionHeader
                  title="Basic Deal Information"
                  description="Provide the basic details about this commercial deal"
                />

                <div className="space-y-6">
                  {/* Region and Sales Channel at the top */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="region"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Region <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select region" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="northeast">
                                Northeast
                              </SelectItem>
                              <SelectItem value="midwest">Midwest</SelectItem>
                              <SelectItem value="midatlantic">
                                Mid-Atlantic
                              </SelectItem>
                              <SelectItem value="south">South</SelectItem>
                              <SelectItem value="west">West</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="salesChannel"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Sales Channel{" "}
                            <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select sales channel" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="client_direct">
                                Client Direct
                              </SelectItem>
                              <SelectItem value="holding_company">
                                Holding Company
                              </SelectItem>
                              <SelectItem value="independent_agency">
                                Independent Agency
                              </SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Conditional fields based on sales channel */}
                  <div className="grid grid-cols-1 gap-6">
                    {salesChannel === "client_direct" && (
                      <FormField
                        control={form.control}
                        name="advertiserName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              Advertiser Name{" "}
                              <span className="text-red-500">*</span>
                            </FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select advertiser" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {advertisers.map((advertiser) => (
                                  <SelectItem
                                    key={advertiser?.id}
                                    value={advertiser?.name}
                                  >
                                    {advertiser?.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormDescription>
                              Historical data will be loaded automatically when
                              selected
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    {(salesChannel === "holding_company" ||
                      salesChannel === "independent_agency") && (
                      <FormField
                        control={form.control}
                        name="agencyName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              Agency Name{" "}
                              <span className="text-red-500">*</span>
                            </FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select agency" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {agencies
                                  .filter((agency) =>
                                    salesChannel === "holding_company"
                                      ? agency?.type === "holding_company"
                                      : agency?.type === "independent",
                                  )
                                  .map((agency) => (
                                    <SelectItem
                                      key={agency?.id}
                                      value={agency?.name}
                                    >
                                      {agency?.name}
                                    </SelectItem>
                                  ))}
                              </SelectContent>
                            </Select>
                            <FormDescription>
                              Historical data will be loaded automatically when
                              selected
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                  </div>

                  {/* Deal Type as card-style selection */}
                  <div className="space-y-4">
                    <FormField
                      control={form.control}
                      name="dealType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Type <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                              {/* Grow Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "grow" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("grow")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-green-600"
                                    >
                                      <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline>
                                      <polyline points="17 6 23 6 23 12"></polyline>
                                    </svg>
                                    <span>Grow</span>
                                  </CardTitle>
                                  <CardDescription>
                                    20%+ YOY Growth
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    For existing clients with strong growth
                                    potential. Focuses on exceeding 20%
                                    year-over-year revenue growth through
                                    expanded product usage or new business
                                    units.
                                  </p>
                                </CardContent>
                              </Card>

                              {/* Protect Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "protect" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("protect")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-blue-600"
                                    >
                                      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                      <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                    <span>Protect</span>
                                  </CardTitle>
                                  <CardDescription>
                                    Large Account Retention
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    Designed for strategic account retention,
                                    especially for large enterprise clients.
                                    Focuses on maintaining current revenue
                                    levels while ensuring long-term partnership
                                    stability.
                                  </p>
                                </CardContent>
                              </Card>

                              {/* Custom Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "custom" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("custom")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-purple-600"
                                    >
                                      <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                      <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                    </svg>
                                    <span>Custom</span>
                                  </CardTitle>
                                  <CardDescription>
                                    Special Requirements
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    For specialized deals requiring custom
                                    implementation, non-standard terms, or
                                    unique technical requirements. Typically
                                    used for strategic partnerships and
                                    innovative projects.
                                  </p>
                                </CardContent>
                              </Card>
                            </div>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Deal Structure */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="dealStructure"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Structure <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={(value) => {
                              field.onChange(value);
                              setDealStructure(value as "tiered" | "flat_commit");
                            }}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Choose tiered or flat commit structure" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="tiered">Tiered Revenue</SelectItem>
                              <SelectItem value="flat_commit">Flat Commit</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormDescription>
                            The revenue structure for this deal
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="contractTermMonths"
                      render={({ field }) => {
                        // Auto-calculate contract term when dates change
                        const startDate = form.watch("termStartDate");
                        const endDate = form.watch("termEndDate");
                        
                        React.useEffect(() => {
                          if (startDate && endDate && startDate < endDate) {
                            const start = new Date(startDate);
                            const end = new Date(endDate);
                            const monthsDiff = Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
                            if (monthsDiff !== parseInt(field.value || "0")) {
                              field.onChange(monthsDiff.toString());
                            }
                          }
                        }, [startDate, endDate, field]);

                        return (
                          <FormItem>
                            <FormLabel>
                              Contract Term (Months) <span className="text-red-500">*</span>
                            </FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                placeholder="14"
                                value={field.value || ""}
                                onChange={(e) => {
                                  const months = parseInt(e.target.value) || 0;
                                  field.onChange(e.target.value);
                                  // Auto-calculate end date based on start date + months
                                  const startDate = form.getValues("termStartDate");
                                  if (startDate && months > 0) {
                                    const endDate = new Date(startDate);
                                    endDate.setMonth(endDate.getMonth() + months);
                                    form.setValue("termEndDate", endDate);
                                  }
                                }}
                              />
                            </FormControl>
                            <FormDescription>
                              Length of the contract in months (auto-calculated from dates)
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        );
                      }}
                    />
                  </div>

                  {/* Date Range Selection */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="termStartDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Start Date <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              type="date"
                              value={field.value || ""}
                              onChange={(e) => {
                                const dateString = e.target.value;
                                field.onChange(dateString);
                                
                                // Auto-update end date if contract term is set
                                const contractTermMonths = parseInt(form.getValues("contractTermMonths") || "0");
                                if (dateString && contractTermMonths > 0) {
                                  const startDate = new Date(dateString);
                                  startDate.setMonth(startDate.getMonth() + contractTermMonths);
                                  form.setValue("termEndDate", startDate.toISOString().split('T')[0]);
                                }
                              }}
                            />
                          </FormControl>
                          <FormDescription>
                            When the deal term begins
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="termEndDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal End Date <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              type="date"
                              value={field.value || ""}
                              onChange={(e) => {
                                const dateString = e.target.value;
                                field.onChange(dateString);
                                
                                // Auto-update contract term when end date changes
                                const startDate = form.getValues("termStartDate");
                                if (startDate && dateString && startDate < dateString) {
                                  const start = new Date(startDate);
                                  const end = new Date(dateString);
                                  const monthsDiff = Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
                                  form.setValue("contractTermMonths", monthsDiff.toString());
                                }
                              }}
                            />
                          </FormControl>
                          <FormDescription>
                            When the deal term ends
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Business Summary */}
                  <FormField
                    control={form.control}
                    name="businessSummary"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>
                          Business Summary <span className="text-red-500">*</span>
                        </FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Briefly describe the deal, its objectives, and any special considerations"
                            className="min-h-[100px]"
                            value={field.value || ""}
                            onChange={field.onChange}
                          />
                        </FormControl>
                        <FormDescription>
                          Briefly describe the business opportunity, growth potential, and any special considerations.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Navigation Button */}
                  <div className="flex justify-end pt-4">
                    <Button
                      type="button"
                      onClick={nextStep}
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      Next: Value Structure
                    </Button>
                  </div>
                </div>
              </CardContent>
            )}

            {/* Step 1: Business Context */}
            {formStep === 1 && (
              <>
                <BusinessContextSection form={form} variant="submitDeal" />
                <CardContent className="p-6 border-t">
                  <div className="flex justify-between">
                    <Button type="button" variant="outline" onClick={prevStep}>
                      Previous: Deal Overview
                    </Button>
                    <Button type="button" onClick={nextStep}>
                      Next: Value Structure
                    </Button>
                  </div>
                </CardContent>
              </>
            )}

            {/* Step 2: Value Structure */}
            {formStep === 2 && (
              <CardContent className="p-6">
                <FormSectionHeader
                  title="Value Structure"
                  description="Define the financial structure and value proposition for this deal"
                />
                <div className="space-y-6">
                  {/* Simplified approval alert based on basic deal parameters */}
                  {form.watch("annualRevenue") !== undefined &&
                    form.watch("contractTerm") !== undefined && (
                      <ApprovalAlert
                        totalValue={
                          Number(form.watch("annualRevenue")) || 0
                        }
                        contractTerm={
                          Number(form.watch("contractTerm")) || 12
                        }
                        dealType={String(form.watch("dealType")) || "grow"}
                        salesChannel={
                          String(form.watch("salesChannel")) ||
                          "independent_agency"
                        }
                        onChange={handleApprovalChange}
                      />
                    )}
                  {/* Standard Deal Criteria Help Info moved to Review & Submit tab */}
                  {/* Structure card removed as it's now empty since fields were moved to Deal Overview */}
                  {/* ✅ Phase 2.5: Removed ValueStructureSection - now handled by IncentiveStructureSection */}

                  {/* Separate Incentive Structure Section - Show for both types */}
                  <IncentiveStructureSection
                    form={form}
                    dealStructureType={dealStructureType}
                    dealTiers={dealTiers}
                    setDealTiers={setDealTiers}
                    selectedIncentives={selectedIncentives}
                    setSelectedIncentives={(incentives) => {
                      incentiveManager.clearAllIncentives();
                      incentives.forEach(incentive => incentiveManager.addSelectedIncentive(incentive));
                    }}
                    tierIncentives={tierIncentives}
                    setTierIncentives={(incentives) => {
                      incentives.forEach(incentive => incentiveManager.addTierIncentive(incentive));
                    }}
                    showAddIncentiveForm={showAddIncentiveForm}
                    setShowAddIncentiveForm={incentiveManager.toggleAddIncentiveForm}
                  />

                  {/* ✅ Phase 2.3: Legacy flat_commit code block removed */}
                  {false && (
                    <div className="bg-white p-6 rounded-lg border border-slate-200 shadow-sm mb-8">
                    {/* Revenue section header with collapsible control */}
                    <div className="flex items-center justify-between mb-4">
                      <div
                        className="flex items-center cursor-pointer"
                        onClick={() => {
                          // Toggle collapse state using a new state variable
                          const revenueSection =
                            document.getElementById("revenue-section");
                          const chevron =
                            document.getElementById("revenue-chevron");
                          if (revenueSection?.classList.contains("h-0")) {
                            revenueSection.classList.remove(
                              "h-0",
                              "overflow-hidden",
                              "py-0",
                            );
                            revenueSection.classList.add("h-auto");
                            chevron?.classList.remove(
                              "transform",
                              "rotate-180",
                            );
                          } else {
                            revenueSection?.classList.add(
                              "h-0",
                              "overflow-hidden",
                              "py-0",
                            );
                            revenueSection?.classList.remove("h-auto");
                            chevron?.classList.add("transform", "rotate-180");
                          }
                        }}
                      >
                        <h3 className="text-lg font-medium text-slate-900 bg-gradient-to-r from-purple-700 to-indigo-500 bg-clip-text text-transparent">
                          Revenue & Profitability
                        </h3>
                        <svg
                          id="revenue-chevron"
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="ml-2 text-slate-500 transition-transform"
                        >
                          <polyline points="6 9 12 15 18 9"></polyline>
                        </svg>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        type="button"
                        className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white border-0 hover:from-purple-700 hover:to-indigo-700"
                        onClick={() => {
                          try {
                            tierManager.addTier();
                          } catch (error: any) {
                            toast({
                              title: "Cannot Add Tier",
                              description: error.message || "Maximum tiers reached",
                              variant: "destructive",
                            });
                          }
                        }}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Tier
                      </Button>
                    </div>

                    {/* Collapsible content section */}
                    <div id="revenue-section" className="transition-all h-auto">
                      <div className="p-3 bg-blue-50 border border-blue-100 rounded text-sm text-blue-800 mb-4">
                        <Info className="h-4 w-4 inline mr-2" />
                        This section details revenue targets, gross margin
                        percentages, and calculated profitability metrics for
                        each tier. Key metrics include Revenue Growth Rate and
                        Gross Margin Growth Rate compared to last year's
                        performance.
                      </div>

                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse table-fixed">
                          <colgroup>
                            <col className="w-[30%]" />
                            <col className="w-[14%]" />
                            {dealTiers.map((tier) => (
                              <col
                                key={`col-${tier.tierNumber}`}
                                className="w-[14%]"
                              />
                            ))}
                          </colgroup>
                          <thead>
                            <tr>
                              <th className="text-left p-3 bg-slate-100 border border-slate-200"></th>
                              <th className="text-center p-3 bg-slate-100 border border-slate-200">
                                Last Year
                              </th>
                              {dealTiers.map((tier) => (
                                <th
                                  key={`th-${tier.tierNumber}`}
                                  className="text-center p-3 bg-slate-100 border border-slate-200"
                                >
                                  <div className="flex justify-between items-center">
                                    <span className="flex-1">
                                      Tier {tier.tierNumber}
                                    </span>
                                    {tier.tierNumber > 1 && (
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        type="button"
                                        className="h-6 w-6"
                                        onClick={() => {
                                          const newTiers = dealTiers.filter(
                                            (t) =>
                                              t.tierNumber !== tier.tierNumber,
                                          );
                                          // Renumber the tiers
                                          newTiers.forEach((t, i) => {
                                            t.tierNumber = i + 1;
                                          });
                                          setDealTiers(newTiers);
                                        }}
                                      >
                                        <Trash2 className="h-3 w-3 text-red-500" />
                                      </Button>
                                    )}
                                  </div>
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {/* Annual Revenue Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Annual Revenue
                                </div>
                                <div className="text-xs text-slate-500">
                                  Total revenue expected for the fiscal year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year revenue
                                  let previousYearRevenue = 850000; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearRevenue !== undefined
                                    ) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearRevenue !== undefined) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue;
                                    }
                                  }

                                  return (
                                    <div className="text-slate-700">
                                      {formatCurrency(previousYearRevenue)}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier, index) => (
                                <td
                                  key={`revenue-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200"
                                >
                                  <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        $
                                      </span>
                                    </div>
                                    <Input
                                      type="number"
                                      className="pl-7 w-full"
                                      placeholder="0.00"
                                      value={tier.annualRevenue || ""}
                                      onChange={(e) => {
                                        const newTiers = [...dealTiers];
                                        newTiers[index].annualRevenue = e.target
                                          .value
                                          ? parseFloat(e.target.value)
                                          : 0;
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Gross Margin Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">Gross Margin</div>
                                <div className="text-xs text-slate-500">
                                  Percentage of revenue retained after direct
                                  costs
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year margin
                                  let previousYearMargin = 35; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearMargin !== undefined
                                    ) {
                                      previousYearMargin =
                                        advertiser.previousYearMargin;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearMargin !== undefined) {
                                      previousYearMargin =
                                        agency.previousYearMargin;
                                    }
                                  }

                                  return (
                                    <div className="text-slate-700">
                                      {formatPercentage(
                                        previousYearMargin / 100,
                                      )}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier, index) => (
                                <td
                                  key={`margin-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200"
                                >
                                  <div className="relative">
                                    <Input
                                      type="number"
                                      className="pr-8 w-full"
                                      placeholder="0.00"
                                      min="0"
                                      max="100"
                                      value={
                                        (tier.annualGrossMargin || 0) * 100
                                      }
                                      onChange={(e) => {
                                        const newTiers = [...dealTiers];
                                        // Store as decimal (percentage / 100)
                                        const percent = e.target.value
                                          ? parseFloat(e.target.value) / 100
                                          : 0;
                                        newTiers[index].annualGrossMargin = percent;
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        %
                                      </span>
                                    </div>
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Gross Profit Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">Gross Profit</div>
                                <div className="text-xs text-slate-500">
                                  Actual dollar amount retained after direct
                                  costs
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year revenue and margin
                                  let previousYearRevenue = 850000; // Default to mock value
                                  let previousYearMargin = 35; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (advertiser) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue ||
                                        previousYearRevenue;
                                      previousYearMargin =
                                        advertiser.previousYearMargin ||
                                        previousYearMargin;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue ||
                                        previousYearRevenue;
                                      previousYearMargin =
                                        agency.previousYearMargin ||
                                        previousYearMargin;
                                    }
                                  }

                                  const previousYearProfit =
                                    previousYearRevenue *
                                    (previousYearMargin / 100);

                                  return (
                                    <div className="text-slate-700">
                                      {formatCurrency(previousYearProfit)}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier) => (
                                <td
                                  key={`profit-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200 text-center"
                                >
                                  {/* Not editable, calculated field */}
                                  <div className="text-slate-700">
                                    {formatCurrency(
                                      (tier.annualRevenue || 0) *
                                        ((tier.annualGrossMargin || 0) /
                                          100),
                                    )}
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Revenue Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Revenue Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Percentage increase compared to last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Use our new calculation function
                                const growthRate =
                                  calculateRevenueGrowthRate(tier);

                                return (
                                  <td
                                    key={`revenue-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    {/* Not editable, calculated field */}
                                    <div
                                      className={cn(
                                        "text-slate-700",
                                        growthRate > 0
                                          ? "text-green-600"
                                          : growthRate < 0
                                            ? "text-red-600"
                                            : "",
                                      )}
                                    >
                                      {formatPercentage(growthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>

                            {/* Gross Margin Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Gross Margin Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Change in margin percentage vs last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Use our new calculation function for margin growth
                                const growthRate =
                                  calculateGrossMarginGrowthRate(tier);

                                return (
                                  <td
                                    key={`margin-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    <div
                                      className={`${growthRate > 0 ? "text-green-600" : "text-red-600"}`}
                                    >
                                      {formatPercentage(growthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>

                            {/* Gross Profit Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Gross Profit Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Change in dollar profit amount vs last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Find previous year revenue and margin
                                let previousYearRevenue = 850000; // Default to mock value
                                let previousYearMargin = 35; // Default to mock value
                                const salesChannel = form.watch("salesChannel");
                                const advertiserName =
                                  form.watch("advertiserName");
                                const agencyName = form.watch("agencyName");

                                if (
                                  salesChannel === "client_direct" &&
                                  advertiserName
                                ) {
                                  const advertiser = advertisers.find(
                                    (a) => a.name === advertiserName,
                                  );
                                  if (advertiser) {
                                    previousYearRevenue =
                                      advertiser.previousYearRevenue ||
                                      previousYearRevenue;
                                    previousYearMargin =
                                      advertiser.previousYearMargin ||
                                      previousYearMargin;
                                  }
                                } else if (
                                  (salesChannel === "holding_company" ||
                                    salesChannel === "independent_agency") &&
                                  agencyName
                                ) {
                                  const agency = agencies.find(
                                    (a) => a.name === agencyName,
                                  );
                                  if (agency) {
                                    previousYearRevenue =
                                      agency.previousYearRevenue ||
                                      previousYearRevenue;
                                    previousYearMargin =
                                      agency.previousYearMargin ||
                                      previousYearMargin;
                                  }
                                }

                                // Calculate previous year profit and current profit
                                const previousYearProfit =
                                  previousYearRevenue *
                                  (previousYearMargin / 100);
                                const currentProfit =
                                  (tier.annualRevenue || 0) *
                                  ((tier.annualGrossMargin || 0) / 100);

                                // Calculate growth rate
                                let profitGrowthRate = 0;
                                if (previousYearProfit > 0) {
                                  // Calculate as percentage (169% instead of 1.69)
                                  profitGrowthRate =
                                    currentProfit / previousYearProfit - 1;
                                }

                                return (
                                  <td
                                    key={`profit-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    {/* Not editable, calculated field */}
                                    <div
                                      className={cn(
                                        "text-slate-700",
                                        profitGrowthRate > 0
                                          ? "text-green-600"
                                          : profitGrowthRate < 0
                                            ? "text-red-600"
                                            : "",
                                      )}
                                    >
                                      {formatPercentage(profitGrowthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                )}
                {/* ✅ Phase 2.5: Legacy inline incentive section removed - consolidated into IncentiveStructureSection */}
                                        growthRate > 0
                                          ? "text-red-600"
