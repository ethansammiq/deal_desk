import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useToast } from "@/hooks/use-toast";
import { useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { apiRequest } from "@/lib/queryClient";
import { useLocation } from "wouter";
// Date formatting no longer needed - using ISO 8601 strings directly
import { Info } from "lucide-react";
import { FormSectionHeader, FormProgressTracker, FormHelpPopover, StyledFormField, FormStyles } from "@/components/ui/form-style-guide";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  formatCurrency,
  formatPercentage,
  calculateMonthlyValue,
  calculateNetValue,
  calculateProfit,
  calculateProfitMargin,
  calculateYOYGrowth,
  calculateIncentiveImpact,
  calculateDealFinancialSummary,
  calculateGrossMarginValue,
  calculateTierContribution,
  calculateEffectiveDiscountRate,
  type DealFinancialSummary,
  cn,
} from "@/lib/utils";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Slider } from "@/components/ui/slider";
import { Checkbox } from "@/components/ui/checkbox";
import {
  ApprovalAlert,
  ApprovalHelpText,
  StandardDealCriteriaHelp,
} from "@/components/ApprovalAlert";
import { ApprovalRule } from "@/lib/approval-matrix";
import { Plus, Trash2 } from "lucide-react";
import { IncentiveSelector } from "@/components/IncentiveSelector";
import {
  type SelectedIncentive,
  incentiveCategories,
} from "@/lib/incentive-data";
import { useIncentiveSelection } from "@/hooks/useIncentiveSelection";
import TierSpecificIncentives, {
  type TierIncentive,
} from "@/components/TierSpecificIncentives";

import { ApprovalMatrixDisplay } from "@/components/deal-form/ApprovalMatrixDisplay";
import { ClientInfoSection } from "@/components/shared/ClientInfoSection";
import { DealDetailsSection } from "@/components/deal-form/DealDetailsSection";

import { IncentiveStructureSection } from "@/components/deal-form/IncentiveStructureSection";
import { ReviewSubmitSection } from "@/components/deal-form/ReviewSubmitSection";
import { BusinessContextSection } from "@/components/deal-form/BusinessContextSection";
import { useDealCalculations } from "@/hooks/useDealCalculations";
import { DataMappingService } from "@/services/dataMappingService";
import { useAIAnalysis } from "@/hooks/useAIAnalysis";
import { AIAnalysisCard } from "@/components/ai/AIAnalysisCard";
import { useDealTiers, type DealTier } from "@/hooks/useDealTiers";
import { useDealFormValidation, type DealFormData } from "@/hooks/useDealFormValidation";

import { migrateLegacyTiers, toLegacyFormat } from "@/lib/tier-migration";
import { DEAL_CONSTANTS, INCENTIVE_CONSTANTS, FORM_CONSTANTS } from "@/config/businessConstants";

// Simplified deal schema with only essential fields
// Simplified schema - fields now handled by shared components
const dealFormSchema = z.object({
  // Business summary is in ReviewSubmitSection
  businessSummary: z.string().optional(),
  
  // Business Context fields (required for SubmitDeal)
  growthOpportunityMIQ: z.string().min(1, "Growth Opportunity (MIQ) is required"),
  growthOpportunityClient: z.string().min(1, "Growth Opportunity (Client) is required"),
  clientAsks: z.string().min(1, "Client Asks is required"),
  
  // Optional fields that may come from shared components
  growthAmbition: z.number().optional(),
  contractTermMonths: z.number().optional(),
  
  // Essential financial data for calculations
  annualRevenue: z.coerce.number().positive("Annual revenue must be positive").optional(),
  annualGrossMarginPercent: z.coerce.number().min(0).max(100, "Annual gross margin must be between 0 and 100%").optional(),
  
  // System fields
  status: z.string().default("submitted"),
  referenceNumber: z.string().optional(),
}).passthrough(); // Allow any fields from shared components

type DealFormValues = any; // Allow any fields from shared components

export default function SubmitDeal() {
  // ✅ MIGRATED: Form step now managed by formValidation hook
  // const [formStep, setFormStep] = useState(0); // REPLACED
  const { toast } = useToast();
  const [, navigate] = useLocation();
  const [currentApprover, setCurrentApprover] = useState<ApprovalRule | null>(
    null,
  );
  const [dealStructureType, setDealStructure] = useState<
    "tiered" | "flat_commit" | ""
  >("");
  const [financialSummary, setFinancialSummary] =
    useState<DealFinancialSummary>({
      totalAnnualRevenue: 0,
      totalGrossMargin: 0,
      averageGrossMarginPercent: 0,
      totalIncentiveValue: 0,
      effectiveDiscountRate: 0,
      monthlyValue: 0,
      yearOverYearGrowth: 0,
      projectedNetValue: 0,
    });

  // ✅ Phase 2.3: Legacy helper functions removed - using form.watch() and form.getValues() directly

  // Handle approval level changes
  const handleApprovalChange = (level: string, approvalInfo: ApprovalRule) => {
    setCurrentApprover(approvalInfo);
  };

  // ✅ Phase 2.2: Updated to use hook actions
  const handleIncentiveChange = (incentives: SelectedIncentive[]) => {
    incentiveManager.clearAllIncentives();
    incentives.forEach(incentive => incentiveManager.addSelectedIncentive(incentive));
  };

  const handleTierIncentiveChange = (incentives: TierIncentive[]) => {
    incentives.forEach(incentive => incentiveManager.addTierIncentive(incentive));
  };

  // State to track selected agencies and advertisers for dropdowns
  const [agencies, setAgencies] = useState<AgencyData[]>([]);
  const [advertisers, setAdvertisers] = useState<AdvertiserData[]>([]);

  // Initialize calculation service with current advertiser/agency data
  const dealCalculations = useDealCalculations(advertisers, agencies);

  // Type definitions for advertisers and agencies (simplified)
  interface AdvertiserData {
    id: number;
    name: string;
    region: string;
    // Historical fields - maintained in interface for API compatibility
    // but not used in the simplified UI implementation
    previousYearRevenue?: number;
    previousYearMargin?: number;
  }

  interface AgencyData {
    id: number;
    name: string;
    type: string;
    region: string;
    // Historical fields - maintained in interface for API compatibility
    // but not used in the simplified UI implementation
    previousYearRevenue?: number;
    previousYearMargin?: number;
  }

  // ✅ PHASE 2.3: Legacy interface removal target
  // This DealTier interface should be removed once all references are migrated to DealTier

  // ✅ NEW: Using tierManager hook instead of manual state
  // dealTiers replaced by tierManager.tiers

  // ✅ Phase 2.2: Migrated incentive state to useIncentiveSelection hook
  const incentiveManager = useIncentiveSelection();
  const { 
    selectedIncentives, 
    tierIncentives, 
    showAddIncentiveForm
  } = incentiveManager;

  // Initialize the form
  const form = useForm<DealFormValues>({
    resolver: zodResolver(dealFormSchema),
    defaultValues: {
      // Basic deal information
      dealType: "grow",

      // Business information
      businessSummary: "",

      // Growth opportunity fields (partial move from RequestSupport)
      growthOpportunityMIQ: "",
      growthOpportunityClient: "",
      clientAsks: "",
      
      // Optional RequestSupport fields
      growthAmbition: 0,
      contractTermMonths: 12,

      // Client/Agency information
      salesChannel: undefined,
      region: undefined,
      advertiserName: "",
      agencyName: "",

      // Deal structure
      dealStructure: undefined,

      // Timeframe - ISO 8601 strings
      termStartDate: new Date().toISOString().split('T')[0],
      termEndDate: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],

      // Financial data (simplified)
      annualRevenue: 0,
      annualGrossMargin: 0,

      // Contact information
      email: "",

      // Status
      status: "submitted",
      referenceNumber: `DEAL-${new Date().getFullYear()}-${Math.floor(Math.random() * 10000)}`,
    },
  });

  // AI Analysis Integration
  const aiAnalysis = useAIAnalysis();
  
  // Unified tier management using useDealTiers hook
  const tierManager = useDealTiers({
    maxTiers: 5,
    minTiers: 1
  });
  
  // Use tierManager.tiers as dealTiers for backward compatibility
  const dealTiers = tierManager.tiers;
  const setDealTiers = (tiers: DealTier[]) => tierManager.updateAllTiers(tiers);
  
  const formValidation = useDealFormValidation(form, {
    enableAutoAdvance: false,
    validateOnChange: true,
    formType: 'submitDeal' // ✅ SYNCHRONIZED: Use SubmitDeal form steps
  });
  
  // ✅ MIGRATED: Use hook-managed form step instead of local state
  const formStep = formValidation.currentStep - 1; // Convert from 1-based to 0-based indexing
  
  // Removed complex tier manager - using simple state management
  
  // Trigger AI analysis when critical deal data changes
  React.useEffect(() => {
    const currentDealName = String(form.watch("dealName") || "");
    const currentSalesChannel = String(form.watch("salesChannel") || "");
    const currentRegion = String(form.watch("region") || "");
    
    if (formStep >= 2 && currentDealName && currentSalesChannel && currentRegion) {
      const dealData = {
        dealType: String(form.watch("dealType") || ""),
        salesChannel: currentSalesChannel,
        region: currentRegion,
        advertiserName: String(form.watch("advertiserName") || ""),
        agencyName: String(form.watch("agencyName") || ""),
        dealStructure: dealStructureType,
        annualRevenue: Number(form.watch("annualRevenue") || 0),
        contractTermMonths: String(form.watch("contractTermMonths") || ""),
        termStartDate: String(form.watch("termStartDate") || ""),
        termEndDate: String(form.watch("termEndDate") || ""),
        businessSummary: String(form.watch("businessSummary") || "")
      };
      
      if (dealData.annualRevenue > 0 && dealData.termStartDate && dealData.termEndDate) {
        aiAnalysis.triggerAnalysis(dealData);
      }
    }
  }, [formStep, dealStructureType, aiAnalysis]);

  // Financial calculation helper functions - now using extracted service

  // Helper functions that use the calculation service
  // ✅ PHASE 1 COMPLETE: Eliminated 8 pure wrapper functions (~50 lines)
  // Direct service calls replace all wrapper function usage
  
  // Helper to get advertiser/agency names for calculations
  const getClientNames = () => ({
    advertiserName: String(form.watch("advertiserName") || ""),
    agencyName: String(form.watch("agencyName") || ""),
    salesChannel: String(salesChannel || "")
  });

  const calculateTierIncentiveCost = (tierNumber: number): number => {
    return dealCalculations.calculateTierIncentiveCost(tierNumber, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 2: Replace duplicate logic with service calls
  const calculateTierGrossProfit = (tier: DealTier): number => {
    // Use DealTier directly with service
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateTierGrossProfit(serviceTier, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 2: Replace with service call  
  const calculateRevenueGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateRevenueGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // Calculate gross margin growth rate using the service
  const calculateGrossMarginGrowthRate = (tier: DealTier): number => {
    const advertiserName = String(form.watch("advertiserName") || "");
    const agencyName = String(form.watch("agencyName") || "");
    
    // Convert DealTier to DealTier format expected by service
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    
    return dealCalculations.calculateGrossMarginGrowthRate(serviceTier, String(salesChannel || ""), advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateGrossProfitGrowthRate
  const calculateGrossProfitGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateGrossProfitGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossProfitGrowthRate
  const calculateAdjustedGrossProfitGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossProfitGrowthRate(serviceTier, selectedIncentives, tierIncentives, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossMargin  
  const calculateAdjustedGrossMargin = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossMargin(serviceTier, selectedIncentives, tierIncentives);
  };

  // ✅ PHASE 3: Migrated to service - calculateAdjustedGrossMarginGrowthRate
  const calculateAdjustedGrossMarginGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateAdjustedGrossMarginGrowthRate(serviceTier, selectedIncentives, tierIncentives, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 2: Replace with service call
  const calculateClientValue = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateClientValue(serviceTier);
  };

  // ✅ PHASE 3: Migrated to service - calculateClientValueGrowthRate
  const calculateClientValueGrowthRate = (tier: DealTier): number => {
    const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateClientValueGrowthRate(serviceTier, currentSalesChannel, advertiserName, agencyName);
  };

  // ✅ PHASE 3: Migrated to service - calculateCostGrowthRate
  const calculateCostGrowthRate = (tier: DealTier): number => {
    const serviceTier = {
      tierNumber: tier.tierNumber,
      annualRevenue: tier.annualRevenue,
      annualGrossMargin: tier.annualGrossMargin
    };
    return dealCalculations.calculateCostGrowthRate(serviceTier, selectedIncentives, tierIncentives);
  };

  // Watch for dealStructure changes to handle conditional fields
  
  // Mutation for submitting the deal
  const submitDealMutation = useMutation({
    mutationFn: async (data: DealFormValues) => {
      console.log("Sending data to API:", data);
      return apiRequest("/api/deals", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
    },
    onSuccess: () => {
      console.log("Deal submission successful!");
      queryClient.invalidateQueries({ queryKey: ["/api/deals"] });
      toast({
        title: "Success",
        description: "Deal submitted successfully!",
        variant: "default",
      });
      navigate("/");
    },
    onError: (error: any) => {
      console.error("Deal submission error:", error);
      toast({
        title: "Error",
        description: error.message || "Failed to submit deal",
        variant: "destructive",
      });
    },
  });

  // Fetch agencies and advertisers for dropdowns
  useEffect(() => {
    const fetchAgencies = async () => {
      try {
        const data = await apiRequest("/api/agencies");
        setAgencies(data);
      } catch (error) {
        console.error("Failed to fetch agencies:", error);
        toast({
          title: "Error",
          description: "Failed to load agencies data",
          variant: "destructive",
        });
      }
    };

    const fetchAdvertisers = async () => {
      try {
        const data = await apiRequest("/api/advertisers");
        setAdvertisers(data);
      } catch (error) {
        console.error("Failed to fetch advertisers:", error);
        toast({
          title: "Error",
          description: "Failed to load advertisers data",
          variant: "destructive",
        });
      }
    };

    fetchAgencies();
    fetchAdvertisers();
  }, [toast]);

  // Watch for salesChannel and dealStructure changes to handle conditional fields
  const salesChannel = form.watch("salesChannel");
  const dealStructureValue = form.watch("dealStructure");

  // Update dealStructureType when form value changes
  useEffect(() => {
    if (dealStructureValue) {
      setDealStructure(dealStructureValue as "tiered" | "flat_commit");
    }
  }, [dealStructureValue]);

  // Auto-populate region when selecting advertiser or agency
  useEffect(() => {
    const updateRegionData = async () => {
      const advertiserName = form.getValues("advertiserName");
      const agencyName = form.getValues("agencyName");

      if (salesChannel === "client_direct" && advertiserName) {
        const advertiser = advertisers.find(
          (a: AdvertiserData) => a.name === advertiserName,
        );
        if (advertiser) {
          // Only set the region value
          const regionValue =
            (advertiser?.region as
              | "northeast"
              | "midwest"
              | "midatlantic"
              | "west"
              | "south") || "northeast";
          form.setValue("region", regionValue);
        }
      } else if (
        (salesChannel === "holding_company" ||
          salesChannel === "independent_agency") &&
        agencyName
      ) {
        const agency = agencies.find((a: AgencyData) => a.name === agencyName);
        if (agency) {
          // Only set the region value
          const regionValue =
            (agency?.region as
              | "northeast"
              | "midwest"
              | "midatlantic"
              | "west"
              | "south") || "northeast";
          form.setValue("region", regionValue);
        }
      }
    };

    updateRegionData();
  }, [salesChannel, agencies, advertisers]);

  // Calculate real-time financial impact using dealTiers
  useEffect(() => {
    // Get fresh values from form without causing re-renders
    const getFormData = () => {
      const startDateStr = form.getValues("termStartDate") as string;
      const endDateStr = form.getValues("termEndDate") as string;
      const advertiserName = form.getValues("advertiserName") as string;
      const agencyName = form.getValues("agencyName") as string;
      return { startDateStr, endDateStr, advertiserName, agencyName };
    };
    
    const { startDateStr, endDateStr, advertiserName, agencyName } = getFormData();
    
    // Calculate contract term from ISO 8601 date strings
    let contractTerm = 12; // Default to 12 months
    if (startDateStr && endDateStr) {
      const startDate = new Date(startDateStr);
      const endDate = new Date(endDateStr);
      contractTerm = Math.max(1, (endDate.getFullYear() - startDate.getFullYear()) * 12 + (endDate.getMonth() - startDate.getMonth()));
    }

    // Find the previous year revenue for YoY calculations
    let previousYearRevenue = 0;

    if (salesChannel === "client_direct" && advertiserName) {
      const advertiser = advertisers.find((a) => a.name === advertiserName);
      if (advertiser && advertiser.previousYearRevenue) {
        previousYearRevenue = advertiser.previousYearRevenue;
      }
    } else if (
      (salesChannel === "holding_company" ||
        salesChannel === "independent_agency") &&
      agencyName
    ) {
      const agency = agencies.find((a) => a.name === agencyName);
      if (agency && agency.previousYearRevenue) {
        previousYearRevenue = agency.previousYearRevenue;
      }
    }

    // Calculate financial summary using dealTiers
    const summary = calculateDealFinancialSummary(
      dealTiers,
      contractTerm,
      previousYearRevenue,
    );

    // Update the financial summary state
    setFinancialSummary(summary);
  }, [dealTiers, salesChannel, advertisers, agencies]);

  // ✅ MIGRATED: Form navigation now handled by formValidation hook
  // Legacy functions replaced with hook methods:
  // validateAndGoToStep → formValidation.goToStep
  // nextStep → formValidation.goToNextStep  
  // prevStep → formValidation.goToPreviousStep

  const nextStep = () => {
    const success = formValidation.goToNextStep();
    if (!success && formValidation.currentStepValidation.errors.length > 0) {
      toast({
        title: "Validation Error",
        description: formValidation.currentStepValidation.errors[0],
        variant: "destructive",
      });
    }
  };

  const prevStep = () => {
    formValidation.goToPreviousStep();
  };

  const validateAndGoToStep = (targetStep: number): boolean => {
    const success = formValidation.goToStep(targetStep + 1); // Convert to 1-based indexing
    if (!success && formValidation.currentStepValidation.errors.length > 0) {
      toast({
        title: "Validation Error", 
        description: formValidation.currentStepValidation.errors[0],
        variant: "destructive",
      });
    }
    return success;
  };

  function onSubmit(data: any) {
    console.log("Form submission triggered with data:", data);
    
    // Check for missing fields
    if (!data.dealType || !data.salesChannel || !data.region) {
      console.error("Missing required fields in form submission");
      toast({
        title: "Form Error",
        description: "Missing required basic information. Please check all required fields.",
        variant: "destructive",
      });
      return;
    }
    
    if (!data.termStartDate || !data.termEndDate) {
      console.error("Missing deal term dates");
      toast({
        title: "Form Error",
        description: "Please set both start and end dates for the deal.",
        variant: "destructive",
      });
      return;
    }
  
    // Format dates for deal name - using ISO strings  
    const startDateFormatted = data.termStartDate.replace(/-/g, '');
    const endDateFormatted = data.termEndDate.replace(/-/g, '');

    // Determine client/agency name
    let clientName = "";
    if (data.salesChannel === "client_direct" && data.advertiserName) {
      clientName = data.advertiserName;
    } else if (
      (data.salesChannel === "holding_company" ||
        data.salesChannel === "independent_agency") &&
      data.agencyName
    ) {
      clientName = data.agencyName;
    } else {
      console.error("No client/agency name found");
      toast({
        title: "Form Error",
        description: "Please select a client or agency based on your sales channel.",
        variant: "destructive",
      });
      return;
    }

    // Generate deal name format:
    // Deal Type_Sales Channel_Advertiser Name/Agency Name_Deal Structure_Deal Start Date-Deal End Date
    // ✅ MIGRATED: Using business constants instead of hardcoded maps

    // Generate deal name using the data mapping service
    const dealName = DataMappingService.generateDealName({
      dealType: data.dealType,
      salesChannel: data.salesChannel,
      dealStructure: data.dealStructure,
      advertiserName: data.advertiserName,
      agencyName: data.agencyName,
      termStartDate: data.termStartDate,
      termEndDate: data.termEndDate
    });

    // Include generated deal name, deal tiers data for tiered structure, and selected incentives
    const dealData = {
      ...data,
      dealName: dealName,
      // Add missing required fields for API compatibility
      annualRevenue: data.annualRevenue || DEAL_CONSTANTS.DEFAULT_ANNUAL_REVENUE,
      annualGrossMargin: (data.annualGrossMarginPercent || DEAL_CONSTANTS.DEFAULT_GROSS_MARGIN * 100) / 100,
      // Only include dealTiers if the structure is tiered
      ...(dealStructureType === "tiered" ? { dealTiers: dealTiers } : {}),
      // Include selected incentives
      selectedIncentives,
      // Include tier-specific incentives
      tierIncentives,
    };

    submitDealMutation.mutate(dealData);
  }

  return (
    <div className="p-6">
      <FormSectionHeader
        title="Deal Submission"
        description="Complete the form below to submit a new commercial deal for approval"
        badge="Step 2 of 2"
        helpTitle="About Deal Submission"
        helpContent={
          <>
            <p className="text-sm text-slate-700">
              The deal submission process involves 3 steps:
            </p>
            <ol className={FormStyles.help.list}>
              <li>Complete deal details and basic client information</li>
              <li>Configure deal structure, pricing tiers, and incentives</li>
              <li>Review and submit for approval based on approval matrix</li>
            </ol>
            <p className="text-sm text-slate-700 mt-2">
              Required approvals will be automatically determined based on
              deal size, structure, and non-standard terms.
            </p>
          </>
        }
      />

      {/* Form Progress - Using standardized component */}
      <FormProgressTracker
        steps={[
          { id: 0, label: "Deal Overview" },
          { id: 1, label: "Business Context" },
          { id: 2, label: "Value Structure" },
          { id: 3, label: "Review & Submit" },
        ]}
        currentStep={formStep}
        onStepClick={(stepId) => {
          const step = Number(stepId);
          if (step === 0) {
            prevStep();
          } else if (step > formStep) {
            formValidation.goToNextStep(); // Use hook's navigation
          } else {
            formValidation.goToStep(step + 1); // Convert to 1-based indexing for hook
          }
        }}
      />

      {/* Form Container */}
      <Card>
        <Form {...form}>
          <form onSubmit={(e) => {
            e.preventDefault();
            console.log("Form submit event triggered");
            form.handleSubmit(onSubmit)(e);
          }}>
            {/* Step 1: Deal Overview - Using clean direct component structure */}
            {formStep === 0 && (
              <>
                {/* Client Information Section */}
                <CardContent className="p-6 border-b">
                  <FormSectionHeader
                    title="Client Information"
                    description="Select the client and sales channel for this deal"
                  />
                  <div className="mt-6">
                    <ClientInfoSection
                      form={form}
                      agencies={agencies}
                      advertisers={advertisers}
                      salesChannel={String(salesChannel || "")}
                      layout="grid"
                    />
                  </div>
                </CardContent>

                {/* Deal Details Section */}
                <DealDetailsSection
                  form={form}
                  dealStructureType={dealStructureType}
                  setDealStructure={setDealStructure}
                  nextStep={nextStep}
                />
              </>
            )}

            {/* ORIGINAL FORM STRUCTURE FOR REFERENCE - Using extracted component above */}
            {false && formStep === 0 && (
              <CardContent className="p-6">
                <FormSectionHeader
                  title="Basic Deal Information"
                  description="Provide the basic details about this commercial deal"
                />

                <div className="space-y-6">
                  {/* Region and Sales Channel at the top */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="region"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Region <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select region" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="northeast">
                                Northeast
                              </SelectItem>
                              <SelectItem value="midwest">Midwest</SelectItem>
                              <SelectItem value="midatlantic">
                                Mid-Atlantic
                              </SelectItem>
                              <SelectItem value="south">South</SelectItem>
                              <SelectItem value="west">West</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="salesChannel"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Sales Channel{" "}
                            <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={field.onChange}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Select sales channel" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="client_direct">
                                Client Direct
                              </SelectItem>
                              <SelectItem value="holding_company">
                                Holding Company
                              </SelectItem>
                              <SelectItem value="independent_agency">
                                Independent Agency
                              </SelectItem>
                            </SelectContent>
                          </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Conditional fields based on sales channel */}
                  <div className="grid grid-cols-1 gap-6">
                    {salesChannel === "client_direct" && (
                      <FormField
                        control={form.control}
                        name="advertiserName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              Advertiser Name{" "}
                              <span className="text-red-500">*</span>
                            </FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select advertiser" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {advertisers.map((advertiser) => (
                                  <SelectItem
                                    key={advertiser?.id}
                                    value={advertiser?.name}
                                  >
                                    {advertiser?.name}
                                  </SelectItem>
                                ))}
                              </SelectContent>
                            </Select>
                            <FormDescription>
                              Historical data will be loaded automatically when
                              selected
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}

                    {(salesChannel === "holding_company" ||
                      salesChannel === "independent_agency") && (
                      <FormField
                        control={form.control}
                        name="agencyName"
                        render={({ field }) => (
                          <FormItem>
                            <FormLabel>
                              Agency Name{" "}
                              <span className="text-red-500">*</span>
                            </FormLabel>
                            <Select
                              onValueChange={field.onChange}
                              value={field.value || ""}
                            >
                              <FormControl>
                                <SelectTrigger>
                                  <SelectValue placeholder="Select agency" />
                                </SelectTrigger>
                              </FormControl>
                              <SelectContent>
                                {agencies
                                  .filter((agency) =>
                                    salesChannel === "holding_company"
                                      ? agency?.type === "holding_company"
                                      : agency?.type === "independent",
                                  )
                                  .map((agency) => (
                                    <SelectItem
                                      key={agency?.id}
                                      value={agency?.name}
                                    >
                                      {agency?.name}
                                    </SelectItem>
                                  ))}
                              </SelectContent>
                            </Select>
                            <FormDescription>
                              Historical data will be loaded automatically when
                              selected
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    )}
                  </div>

                  {/* Deal Type as card-style selection */}
                  <div className="space-y-4">
                    <FormField
                      control={form.control}
                      name="dealType"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Type <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                              {/* Grow Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "grow" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("grow")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-green-600"
                                    >
                                      <polyline points="23 6 13.5 15.5 8.5 10.5 1 18"></polyline>
                                      <polyline points="17 6 23 6 23 12"></polyline>
                                    </svg>
                                    <span>Grow</span>
                                  </CardTitle>
                                  <CardDescription>
                                    20%+ YOY Growth
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    For existing clients with strong growth
                                    potential. Focuses on exceeding 20%
                                    year-over-year revenue growth through
                                    expanded product usage or new business
                                    units.
                                  </p>
                                </CardContent>
                              </Card>

                              {/* Protect Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "protect" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("protect")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-blue-600"
                                    >
                                      <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                                      <circle cx="12" cy="7" r="4"></circle>
                                    </svg>
                                    <span>Protect</span>
                                  </CardTitle>
                                  <CardDescription>
                                    Large Account Retention
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    Designed for strategic account retention,
                                    especially for large enterprise clients.
                                    Focuses on maintaining current revenue
                                    levels while ensuring long-term partnership
                                    stability.
                                  </p>
                                </CardContent>
                              </Card>

                              {/* Custom Deal Type Card */}
                              <Card
                                className={`cursor-pointer transition-all hover:shadow-md ${field.value === "custom" ? "ring-2 ring-purple-600 shadow-md" : "border border-slate-200"}`}
                                onClick={() => field.onChange("custom")}
                              >
                                <CardHeader className="p-4 pb-2">
                                  <CardTitle className="text-md flex items-center space-x-2">
                                    <svg
                                      xmlns="http://www.w3.org/2000/svg"
                                      width="18"
                                      height="18"
                                      viewBox="0 0 24 24"
                                      fill="none"
                                      stroke="currentColor"
                                      strokeWidth="2"
                                      strokeLinecap="round"
                                      strokeLinejoin="round"
                                      className="text-purple-600"
                                    >
                                      <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                      <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                    </svg>
                                    <span>Custom</span>
                                  </CardTitle>
                                  <CardDescription>
                                    Special Requirements
                                  </CardDescription>
                                </CardHeader>
                                <CardContent className="p-4 pt-0">
                                  <p className="text-sm text-slate-600">
                                    For specialized deals requiring custom
                                    implementation, non-standard terms, or
                                    unique technical requirements. Typically
                                    used for strategic partnerships and
                                    innovative projects.
                                  </p>
                                </CardContent>
                              </Card>
                            </div>
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Deal Structure */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="dealStructure"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Structure <span className="text-red-500">*</span>
                          </FormLabel>
                          <Select
                            onValueChange={(value) => {
                              field.onChange(value);
                              setDealStructure(value as "tiered" | "flat_commit");
                            }}
                            value={field.value || ""}
                          >
                            <FormControl>
                              <SelectTrigger>
                                <SelectValue placeholder="Choose tiered or flat commit structure" />
                              </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                              <SelectItem value="tiered">Tiered Revenue</SelectItem>
                              <SelectItem value="flat_commit">Flat Commit</SelectItem>
                            </SelectContent>
                          </Select>
                          <FormDescription>
                            The revenue structure for this deal
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="contractTermMonths"
                      render={({ field }) => {
                        // Auto-calculate contract term when dates change
                        const startDate = form.watch("termStartDate");
                        const endDate = form.watch("termEndDate");
                        
                        React.useEffect(() => {
                          if (startDate && endDate && startDate < endDate) {
                            const start = new Date(startDate);
                            const end = new Date(endDate);
                            const monthsDiff = Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
                            if (monthsDiff !== parseInt(field.value || "0")) {
                              field.onChange(monthsDiff.toString());
                            }
                          }
                        }, [startDate, endDate, field]);

                        return (
                          <FormItem>
                            <FormLabel>
                              Contract Term (Months) <span className="text-red-500">*</span>
                            </FormLabel>
                            <FormControl>
                              <Input
                                type="number"
                                placeholder="14"
                                value={field.value || ""}
                                onChange={(e) => {
                                  const months = parseInt(e.target.value) || 0;
                                  field.onChange(e.target.value);
                                  // Auto-calculate end date based on start date + months
                                  const startDate = form.getValues("termStartDate");
                                  if (startDate && months > 0) {
                                    const endDate = new Date(startDate);
                                    endDate.setMonth(endDate.getMonth() + months);
                                    form.setValue("termEndDate", endDate);
                                  }
                                }}
                              />
                            </FormControl>
                            <FormDescription>
                              Length of the contract in months (auto-calculated from dates)
                            </FormDescription>
                            <FormMessage />
                          </FormItem>
                        );
                      }}
                    />
                  </div>

                  {/* Date Range Selection */}
                  <div className="grid grid-cols-1 gap-6 md:grid-cols-2">
                    <FormField
                      control={form.control}
                      name="termStartDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal Start Date <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              type="date"
                              value={field.value || ""}
                              onChange={(e) => {
                                const dateString = e.target.value;
                                field.onChange(dateString);
                                
                                // Auto-update end date if contract term is set
                                const contractTermMonths = parseInt(form.getValues("contractTermMonths") || "0");
                                if (dateString && contractTermMonths > 0) {
                                  const startDate = new Date(dateString);
                                  startDate.setMonth(startDate.getMonth() + contractTermMonths);
                                  form.setValue("termEndDate", startDate.toISOString().split('T')[0]);
                                }
                              }}
                            />
                          </FormControl>
                          <FormDescription>
                            When the deal term begins
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />

                    <FormField
                      control={form.control}
                      name="termEndDate"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>
                            Deal End Date <span className="text-red-500">*</span>
                          </FormLabel>
                          <FormControl>
                            <Input
                              type="date"
                              value={field.value || ""}
                              onChange={(e) => {
                                const dateString = e.target.value;
                                field.onChange(dateString);
                                
                                // Auto-update contract term when end date changes
                                const startDate = form.getValues("termStartDate");
                                if (startDate && dateString && startDate < dateString) {
                                  const start = new Date(startDate);
                                  const end = new Date(dateString);
                                  const monthsDiff = Math.round((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24 * 30.44));
                                  form.setValue("contractTermMonths", monthsDiff.toString());
                                }
                              }}
                            />
                          </FormControl>
                          <FormDescription>
                            When the deal term ends
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {/* Business Summary */}
                  <FormField
                    control={form.control}
                    name="businessSummary"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>
                          Business Summary <span className="text-red-500">*</span>
                        </FormLabel>
                        <FormControl>
                          <Textarea
                            placeholder="Briefly describe the deal, its objectives, and any special considerations"
                            className="min-h-[100px]"
                            value={field.value || ""}
                            onChange={field.onChange}
                          />
                        </FormControl>
                        <FormDescription>
                          Briefly describe the business opportunity, growth potential, and any special considerations.
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  {/* Navigation Button */}
                  <div className="flex justify-end pt-4">
                    <Button
                      type="button"
                      onClick={nextStep}
                      className="bg-purple-600 hover:bg-purple-700"
                    >
                      Next: Value Structure
                    </Button>
                  </div>
                </div>
              </CardContent>
            )}

            {/* Step 1: Business Context */}
            {formStep === 1 && (
              <>
                <BusinessContextSection form={form} variant="submitDeal" />
                <CardContent className="p-6 border-t">
                  <div className="flex justify-between">
                    <Button type="button" variant="outline" onClick={prevStep}>
                      Previous: Deal Overview
                    </Button>
                    <Button type="button" onClick={nextStep}>
                      Next: Value Structure
                    </Button>
                  </div>
                </CardContent>
              </>
            )}

            {/* Step 2: Value Structure */}
            {formStep === 2 && (
              <CardContent className="p-6">
                <FormSectionHeader
                  title="Value Structure"
                  description="Define the financial structure and value proposition for this deal"
                />
                <div className="space-y-6">
                  {/* Simplified approval alert based on basic deal parameters */}
                  {form.watch("annualRevenue") !== undefined &&
                    form.watch("contractTerm") !== undefined && (
                      <ApprovalAlert
                        totalValue={
                          Number(form.watch("annualRevenue")) || 0
                        }
                        contractTerm={
                          Number(form.watch("contractTerm")) || 12
                        }
                        dealType={String(form.watch("dealType")) || "grow"}
                        salesChannel={
                          String(form.watch("salesChannel")) ||
                          "independent_agency"
                        }
                        onChange={handleApprovalChange}
                      />
                    )}
                  {/* Standard Deal Criteria Help Info moved to Review & Submit tab */}
                  {/* Structure card removed as it's now empty since fields were moved to Deal Overview */}
                  {/* ✅ Phase 2.5: Removed ValueStructureSection - now handled by IncentiveStructureSection */}

                  {/* Separate Incentive Structure Section - Show for both types */}
                  <IncentiveStructureSection
                    form={form}
                    dealStructureType={dealStructureType}
                    dealTiers={dealTiers}
                    setDealTiers={setDealTiers}
                    selectedIncentives={selectedIncentives}
                    setSelectedIncentives={(incentives) => {
                      incentiveManager.clearAllIncentives();
                      incentives.forEach(incentive => incentiveManager.addSelectedIncentive(incentive));
                    }}
                    tierIncentives={tierIncentives}
                    setTierIncentives={(incentives) => {
                      incentives.forEach(incentive => incentiveManager.addTierIncentive(incentive));
                    }}
                    showAddIncentiveForm={showAddIncentiveForm}
                    setShowAddIncentiveForm={incentiveManager.toggleAddIncentiveForm}
                  />

                  {/* ✅ Phase 2.3: Legacy flat_commit code block removed */}
                  {false && (
                    <div className="bg-white p-6 rounded-lg border border-slate-200 shadow-sm mb-8">
                    {/* Revenue section header with collapsible control */}
                    <div className="flex items-center justify-between mb-4">
                      <div
                        className="flex items-center cursor-pointer"
                        onClick={() => {
                          // Toggle collapse state using a new state variable
                          const revenueSection =
                            document.getElementById("revenue-section");
                          const chevron =
                            document.getElementById("revenue-chevron");
                          if (revenueSection?.classList.contains("h-0")) {
                            revenueSection.classList.remove(
                              "h-0",
                              "overflow-hidden",
                              "py-0",
                            );
                            revenueSection.classList.add("h-auto");
                            chevron?.classList.remove(
                              "transform",
                              "rotate-180",
                            );
                          } else {
                            revenueSection?.classList.add(
                              "h-0",
                              "overflow-hidden",
                              "py-0",
                            );
                            revenueSection?.classList.remove("h-auto");
                            chevron?.classList.add("transform", "rotate-180");
                          }
                        }}
                      >
                        <h3 className="text-lg font-medium text-slate-900 bg-gradient-to-r from-purple-700 to-indigo-500 bg-clip-text text-transparent">
                          Revenue & Profitability
                        </h3>
                        <svg
                          id="revenue-chevron"
                          xmlns="http://www.w3.org/2000/svg"
                          width="20"
                          height="20"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          strokeWidth="2"
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          className="ml-2 text-slate-500 transition-transform"
                        >
                          <polyline points="6 9 12 15 18 9"></polyline>
                        </svg>
                      </div>
                      <Button
                        variant="outline"
                        size="sm"
                        type="button"
                        className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white border-0 hover:from-purple-700 hover:to-indigo-700"
                        onClick={() => {
                          try {
                            tierManager.addTier();
                          } catch (error: any) {
                            toast({
                              title: "Cannot Add Tier",
                              description: error.message || "Maximum tiers reached",
                              variant: "destructive",
                            });
                          }
                        }}
                      >
                        <Plus className="h-4 w-4 mr-1" />
                        Add Tier
                      </Button>
                    </div>

                    {/* Collapsible content section */}
                    <div id="revenue-section" className="transition-all h-auto">
                      <div className="p-3 bg-blue-50 border border-blue-100 rounded text-sm text-blue-800 mb-4">
                        <Info className="h-4 w-4 inline mr-2" />
                        This section details revenue targets, gross margin
                        percentages, and calculated profitability metrics for
                        each tier. Key metrics include Revenue Growth Rate and
                        Gross Margin Growth Rate compared to last year's
                        performance.
                      </div>

                      <div className="overflow-x-auto">
                        <table className="w-full border-collapse table-fixed">
                          <colgroup>
                            <col className="w-[30%]" />
                            <col className="w-[14%]" />
                            {dealTiers.map((tier) => (
                              <col
                                key={`col-${tier.tierNumber}`}
                                className="w-[14%]"
                              />
                            ))}
                          </colgroup>
                          <thead>
                            <tr>
                              <th className="text-left p-3 bg-slate-100 border border-slate-200"></th>
                              <th className="text-center p-3 bg-slate-100 border border-slate-200">
                                Last Year
                              </th>
                              {dealTiers.map((tier) => (
                                <th
                                  key={`th-${tier.tierNumber}`}
                                  className="text-center p-3 bg-slate-100 border border-slate-200"
                                >
                                  <div className="flex justify-between items-center">
                                    <span className="flex-1">
                                      Tier {tier.tierNumber}
                                    </span>
                                    {tier.tierNumber > 1 && (
                                      <Button
                                        variant="ghost"
                                        size="icon"
                                        type="button"
                                        className="h-6 w-6"
                                        onClick={() => {
                                          const newTiers = dealTiers.filter(
                                            (t) =>
                                              t.tierNumber !== tier.tierNumber,
                                          );
                                          // Renumber the tiers
                                          newTiers.forEach((t, i) => {
                                            t.tierNumber = i + 1;
                                          });
                                          setDealTiers(newTiers);
                                        }}
                                      >
                                        <Trash2 className="h-3 w-3 text-red-500" />
                                      </Button>
                                    )}
                                  </div>
                                </th>
                              ))}
                            </tr>
                          </thead>
                          <tbody>
                            {/* Annual Revenue Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Annual Revenue
                                </div>
                                <div className="text-xs text-slate-500">
                                  Total revenue expected for the fiscal year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year revenue
                                  let previousYearRevenue = 850000; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearRevenue !== undefined
                                    ) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearRevenue !== undefined) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue;
                                    }
                                  }

                                  return (
                                    <div className="text-slate-700">
                                      {formatCurrency(previousYearRevenue)}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier, index) => (
                                <td
                                  key={`revenue-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200"
                                >
                                  <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        $
                                      </span>
                                    </div>
                                    <Input
                                      type="number"
                                      className="pl-7 w-full"
                                      placeholder="0.00"
                                      value={tier.annualRevenue || ""}
                                      onChange={(e) => {
                                        const newTiers = [...dealTiers];
                                        newTiers[index].annualRevenue = e.target
                                          .value
                                          ? parseFloat(e.target.value)
                                          : 0;
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Gross Margin Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">Gross Margin</div>
                                <div className="text-xs text-slate-500">
                                  Percentage of revenue retained after direct
                                  costs
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year margin
                                  let previousYearMargin = 35; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearMargin !== undefined
                                    ) {
                                      previousYearMargin =
                                        advertiser.previousYearMargin;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearMargin !== undefined) {
                                      previousYearMargin =
                                        agency.previousYearMargin;
                                    }
                                  }

                                  return (
                                    <div className="text-slate-700">
                                      {formatPercentage(
                                        previousYearMargin / 100,
                                      )}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier, index) => (
                                <td
                                  key={`margin-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200"
                                >
                                  <div className="relative">
                                    <Input
                                      type="number"
                                      className="pr-8 w-full"
                                      placeholder="0.00"
                                      min="0"
                                      max="100"
                                      value={
                                        (tier.annualGrossMargin || 0) * 100
                                      }
                                      onChange={(e) => {
                                        const newTiers = [...dealTiers];
                                        // Store as decimal (percentage / 100)
                                        const percent = e.target.value
                                          ? parseFloat(e.target.value) / 100
                                          : 0;
                                        newTiers[index].annualGrossMargin = percent;
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        %
                                      </span>
                                    </div>
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Gross Profit Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">Gross Profit</div>
                                <div className="text-xs text-slate-500">
                                  Actual dollar amount retained after direct
                                  costs
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                {(() => {
                                  // Find previous year revenue and margin
                                  let previousYearRevenue = 850000; // Default to mock value
                                  let previousYearMargin = 35; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (advertiser) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue ||
                                        previousYearRevenue;
                                      previousYearMargin =
                                        advertiser.previousYearMargin ||
                                        previousYearMargin;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue ||
                                        previousYearRevenue;
                                      previousYearMargin =
                                        agency.previousYearMargin ||
                                        previousYearMargin;
                                    }
                                  }

                                  const previousYearProfit =
                                    previousYearRevenue *
                                    (previousYearMargin / 100);

                                  return (
                                    <div className="text-slate-700">
                                      {formatCurrency(previousYearProfit)}
                                    </div>
                                  );
                                })()}
                              </td>
                              {dealTiers.map((tier) => (
                                <td
                                  key={`profit-${tier.tierNumber}`}
                                  className="p-3 border border-slate-200 text-center"
                                >
                                  {/* Not editable, calculated field */}
                                  <div className="text-slate-700">
                                    {formatCurrency(
                                      (tier.annualRevenue || 0) *
                                        ((tier.annualGrossMargin || 0) /
                                          100),
                                    )}
                                  </div>
                                </td>
                              ))}
                            </tr>

                            {/* Revenue Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Revenue Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Percentage increase compared to last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Use our new calculation function
                                const growthRate =
                                  calculateRevenueGrowthRate(tier);

                                return (
                                  <td
                                    key={`revenue-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    {/* Not editable, calculated field */}
                                    <div
                                      className={cn(
                                        "text-slate-700",
                                        growthRate > 0
                                          ? "text-green-600"
                                          : growthRate < 0
                                            ? "text-red-600"
                                            : "",
                                      )}
                                    >
                                      {formatPercentage(growthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>

                            {/* Gross Margin Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Gross Margin Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Change in margin percentage vs last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Use our new calculation function for margin growth
                                const growthRate =
                                  calculateGrossMarginGrowthRate(tier);

                                return (
                                  <td
                                    key={`margin-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    <div
                                      className={`${growthRate > 0 ? "text-green-600" : "text-red-600"}`}
                                    >
                                      {formatPercentage(growthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>

                            {/* Gross Profit Growth Rate Row */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Gross Profit Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Change in dollar profit amount vs last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                <div className="text-slate-700">-</div>
                              </td>
                              {dealTiers.map((tier) => {
                                // Find previous year revenue and margin
                                let previousYearRevenue = 850000; // Default to mock value
                                let previousYearMargin = 35; // Default to mock value
                                const salesChannel = form.watch("salesChannel");
                                const advertiserName =
                                  form.watch("advertiserName");
                                const agencyName = form.watch("agencyName");

                                if (
                                  salesChannel === "client_direct" &&
                                  advertiserName
                                ) {
                                  const advertiser = advertisers.find(
                                    (a) => a.name === advertiserName,
                                  );
                                  if (advertiser) {
                                    previousYearRevenue =
                                      advertiser.previousYearRevenue ||
                                      previousYearRevenue;
                                    previousYearMargin =
                                      advertiser.previousYearMargin ||
                                      previousYearMargin;
                                  }
                                } else if (
                                  (salesChannel === "holding_company" ||
                                    salesChannel === "independent_agency") &&
                                  agencyName
                                ) {
                                  const agency = agencies.find(
                                    (a) => a.name === agencyName,
                                  );
                                  if (agency) {
                                    previousYearRevenue =
                                      agency.previousYearRevenue ||
                                      previousYearRevenue;
                                    previousYearMargin =
                                      agency.previousYearMargin ||
                                      previousYearMargin;
                                  }
                                }

                                // Calculate previous year profit and current profit
                                const previousYearProfit =
                                  previousYearRevenue *
                                  (previousYearMargin / 100);
                                const currentProfit =
                                  (tier.annualRevenue || 0) *
                                  ((tier.annualGrossMargin || 0) / 100);

                                // Calculate growth rate
                                let profitGrowthRate = 0;
                                if (previousYearProfit > 0) {
                                  // Calculate as percentage (169% instead of 1.69)
                                  profitGrowthRate =
                                    currentProfit / previousYearProfit - 1;
                                }

                                return (
                                  <td
                                    key={`profit-growth-${tier.tierNumber}`}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    {/* Not editable, calculated field */}
                                    <div
                                      className={cn(
                                        "text-slate-700",
                                        profitGrowthRate > 0
                                          ? "text-green-600"
                                          : profitGrowthRate < 0
                                            ? "text-red-600"
                                            : "",
                                      )}
                                    >
                                      {formatPercentage(profitGrowthRate)}
                                    </div>
                                  </td>
                                );
                              })}
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                )}
                {/* ✅ Phase 2.5: Legacy inline incentive section removed - consolidated into IncentiveStructureSection */}
                
                <div className="mt-8 flex justify-between">
                  <Button type="button" variant="outline" onClick={prevStep}>
                    Previous: Business Context
                  </Button>
                  <Button type="button" onClick={nextStep}>
                    Next: Review & Submit
                  </Button>
                </div>
                </div>
              </CardContent>
            )}

            {/* Step 3: Review & Submit */}
            {formStep === 3 && (

                            {/* Client Value Growth Rate */}
                            <tr>
                              <td className="p-3 border border-slate-200 bg-slate-50">
                                <div className="font-medium">
                                  Client Value Growth Rate
                                </div>
                                <div className="text-xs text-slate-500">
                                  Change vs. last year
                                </div>
                              </td>
                              <td className="p-3 border border-slate-200 text-center">
                                —
                              </td>
                              {dealTiers.map((tier) => {
                                // Calculate client value growth rate for this tier
                                const growthRate =
                                  calculateClientValueGrowthRate(tier);
                                return (
                                  <td
                                    key={tier.tierNumber}
                                    className="p-3 border border-slate-200 text-center"
                                  >
                                    <span
                                      className={
                                        growthRate > 0
                                          ? "text-green-600"
                                          : "text-red-600"
                                      }
                                    >
                                      {formatPercentage(growthRate)}
                                    </span>
                                  </td>
                                );
                              })}
                            </tr>
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                  {/* Close the main incentives section container div */}
                  {/* This section is hidden - we use tiered view for all deal types */}
                  {false && dealStructureType === "flat_commit" && (
                    <div className="mt-8 bg-slate-50 p-6 rounded-lg border border-slate-200">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-slate-900">
                          Flat Commitment Structure
                        </h3>
                      </div>

                      <div className="space-y-8">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                          {/* Annual Revenue */}
                          <FormField
                            control={form.control}
                            name="annualRevenue"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>
                                  Annual Revenue{" "}
                                  <span className="text-red-500">*</span>
                                </FormLabel>
                                <div className="relative">
                                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <span className="text-slate-500 sm:text-sm">
                                      $
                                    </span>
                                  </div>
                                  <FormControl>
                                    <Input
                                      type="number"
                                      placeholder="0.00"
                                      className="pl-7"
                                      min="0"
                                      {...field}
                                      onChange={(e) => {
                                        const value = e.target.value
                                          ? parseFloat(e.target.value)
                                          : 0;
                                        field.onChange(value);
                                      }}
                                    />
                                  </FormControl>
                                </div>
                                <FormDescription>
                                  Total annual revenue expectation for this deal
                                </FormDescription>
                                <FormMessage />
                              </FormItem>
                            )}
                          />

                          {/* Gross Margin Percentage */}
                          <FormField
                            control={form.control}
                            name="annualGrossMargin"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>
                                  Gross Margin (%){" "}
                                  <span className="text-red-500">*</span>
                                </FormLabel>
                                <div className="relative">
                                  <FormControl>
                                    <Input
                                      type="number"
                                      placeholder="0"
                                      className="pr-8"
                                      min="0"
                                      max="100"
                                      {...field}
                                      onChange={(e) => {
                                        const value = e.target.value
                                          ? parseFloat(e.target.value)
                                          : 0;
                                        field.onChange(value);
                                      }}
                                    />
                                  </FormControl>
                                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                    <span className="text-slate-500 sm:text-sm">
                                      %
                                    </span>
                                  </div>
                                </div>
                                <FormDescription>
                                  Expected gross margin percentage for this
                                  revenue
                                </FormDescription>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>

                        {/* Calculated Values */}
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-white rounded-lg border border-slate-200">
                          <div>
                            <h4 className="text-sm font-medium text-slate-700 mb-1">
                              Total Revenue
                            </h4>
                            <div className="text-xl font-semibold text-slate-900">
                              {formatCurrency(
                                Number(form.watch("annualRevenue")) || 0,
                              )}
                            </div>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-slate-700 mb-1">
                              Gross Margin
                            </h4>
                            <div className="text-xl font-semibold text-slate-900">
                              {formatCurrency(
                                ((Number(form.watch("annualRevenue")) ||
                                  0) *
                                  (Number(
                                    form.watch("annualGrossMargin"),
                                  ) || 0)) /
                                  100,
                              )}
                            </div>
                          </div>
                          <div>
                            <h4 className="text-sm font-medium text-slate-700 mb-1">
                              Monthly Revenue
                            </h4>
                            <div className="text-xl font-semibold text-slate-900">
                              {formatCurrency(
                                (Number(form.watch("annualRevenue")) ||
                                  0) /
                                  (Number(form.watch("contractTerm")) ||
                                    12),
                              )}
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Incentive Value for Flat Commit - No header as requested */}
                      <div className="mt-6">
                        <div className="overflow-x-auto">
                          <table className="w-full border-collapse">
                            <thead>
                              <tr>
                                <th className="text-left p-3 bg-slate-100 border border-slate-200 w-1/3">
                                  Field
                                </th>
                                <th className="text-left p-3 bg-slate-100 border border-slate-200 w-2/3">
                                  Current
                                </th>
                              </tr>
                            </thead>
                            <tbody>
                              {/* Incentive Type Row */}
                              <tr>
                                <td className="font-medium p-3 border border-slate-200 bg-slate-50">
                                  Incentive Type
                                </td>
                                <td className="p-3 border border-slate-200">
                                  <Select
                                    defaultValue="rebate"
                                    onValueChange={(value) => {
                                      const newTier = { ...dealTiers[0] };
                                      newTier.incentiveCategory = value as any;
                                      const newTiers = [
                                        newTier,
                                        ...dealTiers.slice(1),
                                      ];
                                      setDealTiers(newTiers);
                                    }}
                                  >
                                    <SelectTrigger className="w-full">
                                      <SelectValue placeholder="Select type" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      <SelectItem value="rebate">
                                        Rebate
                                      </SelectItem>
                                      <SelectItem value="discount">
                                        Discount
                                      </SelectItem>
                                      <SelectItem value="bonus">
                                        Bonus
                                      </SelectItem>
                                      <SelectItem value="other">
                                        Other
                                      </SelectItem>
                                    </SelectContent>
                                  </Select>
                                </td>
                              </tr>

                              {/* Incentive Percentage Row */}
                              <tr>
                                <td className="font-medium p-3 border border-slate-200 bg-slate-50">
                                  Incentive Percentage
                                </td>
                                <td className="p-3 border border-slate-200">
                                  <div className="relative">
                                    <Input
                                      type="number"
                                      className="pr-8 w-full"
                                      placeholder="0.00"
                                      min="0"
                                      max="100"
                                      value={
                                        dealTiers[0] ? (dealTiers[0].incentiveValue / (dealTiers[0].annualRevenue || 1)) * 100 : 0
                                      }
                                      onChange={(e) => {
                                        const newTier = { ...dealTiers[0] };
                                        // Calculate incentive value based on percentage and total revenue
                                        const annualRevenue =
                                          Number(
                                            form.watch("annualRevenue"),
                                          ) || 0;
                                        const percent =
                                          parseFloat(e.target.value) / 100;
                                        newTier.incentiveValue =
                                          annualRevenue * percent;

                                        const newTiers = [
                                          newTier,
                                          ...dealTiers.slice(1),
                                        ];
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                    <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        %
                                      </span>
                                    </div>
                                  </div>
                                </td>
                              </tr>

                              {/* Incentive Amount Row */}
                              <tr>
                                <td className="font-medium p-3 border border-slate-200 bg-slate-50">
                                  Incentive Amount
                                </td>
                                <td className="p-3 border border-slate-200">
                                  <div className="relative">
                                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                      <span className="text-slate-500 sm:text-sm">
                                        $
                                      </span>
                                    </div>
                                    <Input
                                      type="number"
                                      className="pl-7 w-full"
                                      placeholder="0.00"
                                      value={dealTiers[0].incentiveValue || 0}
                                      onChange={(e) => {
                                        const newTier = { ...dealTiers[0] };
                                        newTier.incentiveValue = parseFloat(
                                          e.target.value,
                                        );

                                        const newTiers = [
                                          newTier,
                                          ...dealTiers.slice(1),
                                        ];
                                        setDealTiers(newTiers);
                                      }}
                                    />
                                  </div>
                                </td>
                              </tr>

                              {/* Incentive Notes Row */}
                              <tr>
                                <td className="font-medium p-3 border border-slate-200 bg-slate-50">
                                  Notes
                                </td>
                                <td className="p-3 border border-slate-200">
                                  <Textarea
                                    placeholder="Enter any notes about this incentive..."
                                    value={dealTiers[0].incentiveNotes || ""}
                                    onChange={(e) => {
                                      const newTier = { ...dealTiers[0] };
                                      newTier.incentiveNotes = e.target.value;
                                      const newTiers = [
                                        newTier,
                                        ...dealTiers.slice(1),
                                      ];
                                      setDealTiers(newTiers);
                                    }}
                                    className="min-h-[80px]"
                                  />
                                </td>
                              </tr>
                            </tbody>
                          </table>
                        </div>

                        <div className="mt-4 p-3 bg-blue-50 border border-blue-100 rounded text-sm text-blue-800">
                          <Info className="h-4 w-4 inline mr-2" />
                          Flat commitment deals typically have a single
                          incentive structure based on the total annual revenue.
                        </div>
                      </div>
                    </div>
                  )}
                
                </div>
                
                {/* Financial Summary Table - Calculated values for each tier */}
                <div className="mt-8 mb-6 bg-white p-6 rounded-lg border border-slate-200 shadow-sm">
                  <h3 className="text-lg font-semibold text-slate-900 mb-4 pb-2 border-b border-slate-100 bg-gradient-to-r from-purple-700 to-indigo-500 bg-clip-text text-transparent">
                    Financial Summary
                  </h3>

                  <div className="overflow-x-auto">
                    <table className="w-full border-collapse table-fixed">
                      <colgroup>
                        <col className="w-[30%]" />
                        <col className="w-[14%]" />
                        {dealTiers.map((tier) => (
                          <col
                            key={`col-summary-${tier.tierNumber}`}
                            className="w-[14%]"
                          />
                        ))}
                      </colgroup>
                      <thead>
                        <tr>
                          <th className="text-left p-3 bg-slate-100 border border-slate-200"></th>
                          <th className="text-center p-3 bg-slate-100 border border-slate-200">
                            Last Year
                          </th>
                          {dealTiers.map((tier) => (
                            <th
                              key={tier.tierNumber}
                              className="text-center p-3 bg-slate-100 border border-slate-200"
                            >
                              Tier {tier.tierNumber}
                            </th>
                          ))}
                        </tr>
                      </thead>
                      <tbody>
                        {/* Adjusted Gross Margin */}
                        <tr>
                          <td className="p-3 border border-slate-200 bg-slate-50">
                            <div className="font-medium">
                              Adjusted Gross Margin
                            </div>
                            <div className="text-xs text-slate-500">
                              Gross margin after incentives
                            </div>
                          </td>
                          <td className="p-3 border border-slate-200 text-center">
                            {(() => {
                              const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
                              return formatPercentage(dealCalculations.getPreviousYearMargin(currentSalesChannel, advertiserName, agencyName) / 100);
                            })()}{" "}
                            {/* Last year value */}
                          </td>
                          {dealTiers.map((tier) => {
                            // Calculate the adjusted gross margin (%) for this tier
                            // This takes into account the incentive cost
                            const grossProfit = calculateTierGrossProfit(tier);
                            const revenue = tier.annualRevenue || 0;
                            const adjustedMargin =
                              revenue > 0 ? grossProfit / revenue : 0;

                            return (
                              <td
                                key={tier.tierNumber}
                                className="p-3 border border-slate-200 text-center"
                              >
                                {formatPercentage(adjustedMargin)}
                              </td>
                            );
                          })}
                        </tr>

                        {/* Adjusted Gross Profit */}
                        <tr>
                          <td className="p-3 border border-slate-200 bg-slate-50">
                            <div className="font-medium">
                              Adjusted Gross Profit
                            </div>
                            <div className="text-xs text-slate-500">
                              Gross profit after incentive costs
                            </div>
                          </td>
                          <td className="p-3 border border-slate-200 text-center">
                            {formatCurrency(dealCalculations.calculationService.getPreviousYearAdjustedGrossProfit(
                              form.watch("salesChannel"), 
                              form.watch("advertiserName"), 
                              form.watch("agencyName")
                            ))}
                          </td>
                          {dealTiers.map((tier) => {
                            // Calculate the adjusted gross profit for this tier
                            const grossProfit = calculateTierGrossProfit(tier);
                            
                            return (
                              <td
                                key={tier.tierNumber}
                                className="p-3 border border-slate-200 text-center"
                              >
                                {formatCurrency(grossProfit)}
                              </td>
                            );
                          })}
                        </tr>
                        
                        {/* Adjusted Gross Margin Growth Rate */}
                        <tr>
                          <td className="p-3 border border-slate-200 bg-slate-50">
                            <div className="font-medium">
                              Adjusted Gross Margin Growth Rate
                            </div>
                            <div className="text-xs text-slate-500">
                              Percentage change in adjusted margin
                            </div>
                          </td>
                          <td className="p-3 border border-slate-200 text-center">
                            — {/* Baseline */}
                          </td>
                          {dealTiers.map((tier) => {
                            // Calculate the adjusted gross margin (%) for this tier
                            // This takes into account the incentive cost
                            const grossProfit = calculateTierGrossProfit(tier);
                            const revenue = tier.annualRevenue || 0;
                            const adjustedMargin =
                              revenue > 0 ? grossProfit / revenue : 0;

                            // Get previous year margin for comparison
                            const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
                            const previousYearMargin = dealCalculations.getPreviousYearMargin(currentSalesChannel, advertiserName, agencyName) / 100;

                            // Calculate growth rate (difference in percentage points)
                            const marginGrowthRate =
                              adjustedMargin - previousYearMargin;

                            return (
                              <td
                                key={tier.tierNumber}
                                className="p-3 border border-slate-200 text-center"
                              >
                                <span
                                  className={
                                    marginGrowthRate > 0
                                      ? "text-green-600"
                                      : "text-red-600"
                                  }
                                >
                                  {formatPercentage(marginGrowthRate)}
                                </span>
                              </td>
                            );
                          })}
                        </tr>

                        {/* Adjusted Gross Profit Growth Rate */}
                        <tr>
                          <td className="p-3 border border-slate-200 bg-slate-50">
                            <div className="font-medium">
                              Adjusted Gross Profit Growth Rate
                            </div>
                            <div className="text-xs text-slate-500">
                              Percentage increase in adjusted profit vs last
                              year
                            </div>
                          </td>
                          <td className="p-3 border border-slate-200 text-center">
                            — {/* Baseline */}
                          </td>
                          {dealTiers.map((tier) => {
                            // Calculate adjusted profit growth rate for this tier
                            const profitGrowthRate =
                              calculateAdjustedGrossProfitGrowthRate(tier);
                            return (
                              <td
                                key={tier.tierNumber}
                                className="p-3 border border-slate-200 text-center"
                              >
                                <span
                                  className={
                                    profitGrowthRate > 0
                                      ? "text-green-600"
                                      : "text-red-600"
                                  }
                                >
                                  {formatPercentage(profitGrowthRate)}
                                </span>
                              </td>
                            );
                          })}
                        </tr>
                      </tbody>
                    </table>
                  </div>
                </div>
                
                <div className="mt-8 flex justify-between">
                  <Button type="button" variant="outline" onClick={prevStep}>
                    Previous: Business Context
                  </Button>
                  <Button type="button" onClick={nextStep}>
                    Next: Review & Submit
                  </Button>
                </div>
                </div>
              </CardContent>
            )}

            {/* Step 3: Review & Submit */}
            {formStep === 3 && (
              <CardContent className="p-6">
                <FormSectionHeader
                  title="Review & Submit"
                />

                <div className="bg-slate-50 p-4 rounded-lg mb-6">
                  <div className="text-sm text-slate-500 italic">
                    By submitting this deal, you confirm that all information is
                    accurate and complete. The deal will be reviewed by the
                    appropriate team members based on your department and deal
                    value.
                  </div>
                </div>

                {/* Review Sections */}
                <div className="space-y-10">
                  {/* Deal Information Section */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden">
                    <div className="px-4 py-3 bg-slate-50 border-b border-slate-200">
                      <h3 className="text-sm font-medium text-slate-700">
                        Deal Information
                      </h3>
                    </div>
                    <div className="p-4">
                      <dl className="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Deal Name
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              // Preview the auto-generated deal name
                              const dealType = form.getValues("dealType");
                              const salesChannel =
                                form.getValues("salesChannel");
                              const termStartDate =
                                form.getValues("termStartDate");
                              const termEndDate = form.getValues("termEndDate");
                              const dealStructure =
                                form.getValues("dealStructure");

                              if (
                                !dealType ||
                                !salesChannel ||
                                !termStartDate ||
                                !termEndDate ||
                                !dealStructure
                              ) {
                                return "Will be auto-generated on submission";
                              }

                              // Get client name
                              let clientName = "";
                              if (
                                salesChannel === "client_direct" &&
                                form.getValues("advertiserName")
                              ) {
                                clientName = String(
                                  form.getValues("advertiserName"),
                                );
                              } else if (
                                (salesChannel === "holding_company" ||
                                  salesChannel === "independent_agency") &&
                                form.getValues("agencyName")
                              ) {
                                clientName = String(
                                  form.getValues("agencyName"),
                                );
                              }

                              if (!clientName)
                                return "Will be auto-generated on submission";

                              // Format mapping
                              const dealTypeMap = {
                                grow: "Grow",
                                protect: "Protect",
                                custom: "Custom",
                              };

                              const salesChannelMap = {
                                client_direct: "Direct",
                                holding_company: "Holding",
                                independent_agency: "Indep",
                              };

                              const dealStructureMap = {
                                tiered: "Tiered",
                                flat_commit: "Flat",
                              };

                              // Format dates - ensure we're working with Date objects
                              const startDateObj =
                                typeof termStartDate === "string"
                                  ? new Date(termStartDate)
                                  : (termStartDate as Date);
                              const endDateObj =
                                typeof termEndDate === "string"
                                  ? new Date(termEndDate)
                                  : (termEndDate as Date);

                              const startDateFormatted = startDateObj.toISOString().split('T')[0].replace(/-/g, '');
                              const endDateFormatted = endDateObj.toISOString().split('T')[0].replace(/-/g, '');

                              // Safely access map values with type casting
                              const dealTypeKey =
                                typeof dealType === "string"
                                  ? (dealType as keyof typeof dealTypeMap)
                                  : "grow";
                              const salesChannelKey =
                                typeof salesChannel === "string"
                                  ? (salesChannel as keyof typeof salesChannelMap)
                                  : "client_direct";
                              const dealStructureKey =
                                typeof dealStructure === "string"
                                  ? (dealStructure as keyof typeof dealStructureMap)
                                  : "flat_commit";

                              return `${dealTypeMap[dealTypeKey]}_${salesChannelMap[salesChannelKey]}_${clientName}_${dealStructureMap[dealStructureKey]}_${startDateFormatted}-${endDateFormatted}`;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Region
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const regionValue = form.getValues("region");
                              console.log("Region value:", regionValue);
                              if (!regionValue) return "Not provided";

                              // Use the same mapping as in the dropdown
                              const regionMap: Record<string, string> = {
                                northeast: "Northeast",
                                midwest: "Midwest",
                                midatlantic: "Mid-Atlantic",
                                south: "South",
                                west: "West",
                                southeast: "Southeast",
                                southwest: "Southwest",
                              };

                              const result =
                                regionMap[String(regionValue)] ||
                                String(regionValue)
                                  .replace(/_/g, " ")
                                  .replace(/\b\w/g, (c) => c.toUpperCase());
                              console.log("Region mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Deal Type
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const dealTypeValue = form.getValues("dealType");
                              console.log("Deal Type value:", dealTypeValue);
                              if (!dealTypeValue) return "Not provided";

                              // Use a mapping for deal types
                              const dealTypeMap: Record<string, string> = {
                                standard_deal: "Standard Deal",
                                seasonal_promotion: "Seasonal Promotion",
                                annual_commitment: "Annual Commitment",
                                new_business: "New Business",
                                grow: "Grow", // Add missing value from the form
                              };

                              const result =
                                dealTypeMap[String(dealTypeValue)] ||
                                String(dealTypeValue);
                              console.log("Deal Type mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Sales Channel
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const salesChannelValue =
                                form.getValues("salesChannel");
                              console.log(
                                "Sales Channel value:",
                                salesChannelValue,
                              );
                              if (!salesChannelValue) return "Not provided";

                              // Use a mapping for sales channel
                              const salesChannelMap: Record<string, string> = {
                                client_direct: "Client Direct",
                                agency: "Agency",
                                independent_agency: "Independent Agency",
                              };

                              const result =
                                salesChannelMap[String(salesChannelValue)] ||
                                String(salesChannelValue);
                              console.log("Sales Channel mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            {salesChannel === "client_direct"
                              ? "Advertiser Name"
                              : "Agency Name"}
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {salesChannel === "client_direct"
                              ? String(
                                  form.getValues("advertiserName") ||
                                    "Not provided",
                                )
                              : String(
                                  form.getValues("agencyName") || "Not provided",
                                )}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Deal Structure
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {(() => {
                              const dealStructureValue =
                                form.getValues("dealStructure");
                              console.log(
                                "Deal Structure value:",
                                dealStructureValue,
                              );
                              if (!dealStructureValue) return "Not provided";

                              // Use a mapping for deal structure
                              const dealStructureMap: Record<string, string> = {
                                tiered: "Tiered",
                                flat_commit: "Flat Commitment",
                              };

                              const result =
                                dealStructureMap[String(dealStructureValue)] ||
                                String(dealStructureValue);
                              console.log("Deal Structure mapped:", result);
                              return result;
                            })()}
                          </dd>
                        </div>
                        <div>
                          <dt className="text-sm font-medium text-slate-500">
                            Contract Term
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("contractTerm")
                              ? `${form.getValues("contractTerm")} months`
                              : "Not provided"}
                          </dd>
                        </div>
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Business Summary
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("businessSummary")
                              ? String(form.getValues("businessSummary"))
                              : "Not provided"}
                          </dd>
                        </div>
                      </dl>
                    </div>
                  </div>

                  {/* Business Context Section */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden">
                    <div className="px-4 py-3 bg-slate-50 border-b border-slate-200">
                      <h3 className="text-sm font-medium text-slate-700">
                        Business Context
                      </h3>
                    </div>
                    <div className="p-4">
                      <dl className="grid grid-cols-1 gap-x-4 gap-y-4 sm:grid-cols-2">
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Growth Opportunity (MIQ)
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("growthOpportunityMIQ")
                              ? String(form.getValues("growthOpportunityMIQ"))
                              : "Not provided"}
                          </dd>
                        </div>

                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Growth Opportunity (Client)
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("growthOpportunityClient")
                              ? String(form.getValues("growthOpportunityClient"))
                              : "Not provided"}
                          </dd>
                        </div>
                        <div className="sm:col-span-2">
                          <dt className="text-sm font-medium text-slate-500">
                            Client Asks
                          </dt>
                          <dd className="mt-1 text-sm text-slate-900">
                            {form.getValues("clientAsks")
                              ? String(form.getValues("clientAsks"))
                              : "Not provided"}
                          </dd>
                        </div>
                      </dl>
                    </div>
                  </div>

                  {/* Deal Structure Summary */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden">
                    <div className="px-4 py-3 bg-slate-50 border-b border-slate-200">
                      <h3 className="text-sm font-medium text-slate-700">
                        Deal Structure Summary
                      </h3>
                    </div>
                    <div className="p-4">
                      {/* Financial Summary Table */}
                      {dealTiers.length > 0 && (
                        <div>
                          <div className="overflow-x-auto">
                            <table className="w-full border-collapse table-fixed text-sm">
                              <colgroup>
                                <col className="w-[30%]" />
                                <col className="w-[14%]" />
                                {dealTiers.map((tier) => (
                                  <col
                                    key={`col-review-${tier.tierNumber}`}
                                    className="w-[14%]"
                                  />
                                ))}
                              </colgroup>
                              <thead>
                                <tr>
                                  <th className="text-left p-2 bg-slate-100 border border-slate-200"></th>
                                  <th className="text-center p-2 bg-slate-100 border border-slate-200">
                                    Last Year
                                  </th>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => (
                                      <th
                                        key={tier.tierNumber}
                                        className="text-center p-2 bg-slate-100 border border-slate-200"
                                      >
                                        Tier {tier.tierNumber}
                                      </th>
                                    ))}
                                </tr>
                              </thead>
                              <tbody>
                                {/* Annual Revenue */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Annual Revenue
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(850000)}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => (
                                      <td
                                        key={tier.tierNumber}
                                        className="p-2 border border-slate-200 text-center"
                                      >
                                        {formatCurrency(
                                          tier.annualRevenue || 0,
                                        )}
                                      </td>
                                    ))}
                                </tr>

                                {/* Revenue Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Revenue Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Find previous year revenue for actual revenue growth calculation
                                      let previousYearRevenue = 850000; // Default to mock value
                                      const salesChannel =
                                        form.watch("salesChannel");
                                      const advertiserName =
                                        form.watch("advertiserName");
                                      const agencyName =
                                        form.watch("agencyName");

                                      if (
                                        salesChannel === "client_direct" &&
                                        advertiserName
                                      ) {
                                        const advertiser = advertisers.find(
                                          (a) => a.name === advertiserName,
                                        );
                                        if (
                                          advertiser &&
                                          advertiser.previousYearRevenue
                                        ) {
                                          previousYearRevenue =
                                            advertiser.previousYearRevenue;
                                        }
                                      } else if (
                                        (salesChannel === "holding_company" ||
                                          salesChannel ===
                                            "independent_agency") &&
                                        agencyName
                                      ) {
                                        const agency = agencies.find(
                                          (a) => a.name === agencyName,
                                        );
                                        if (
                                          agency &&
                                          agency.previousYearRevenue
                                        ) {
                                          previousYearRevenue =
                                            agency.previousYearRevenue;
                                        }
                                      }

                                      // Calculate actual revenue growth rate
                                      const revenueGrowthRate =
                                        previousYearRevenue > 0 &&
                                        tier.annualRevenue
                                          ? tier.annualRevenue /
                                              previousYearRevenue -
                                            1
                                          : 0;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              revenueGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(revenueGrowthRate * 100).toFixed(
                                              1,
                                            )}
                                            %
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Adjusted Gross Margin Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Adjusted Gross Margin Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Get previous year margin
                                      const { advertiserName, agencyName, salesChannel: currentSalesChannel } = getClientNames();
                                      const previousYearMargin = dealCalculations.getPreviousYearMargin(currentSalesChannel, advertiserName, agencyName) / 100;
                                      // Calculate current tier margin
                                      const currentMargin =
                                        (tier.annualGrossMargin || 0) /
                                        100;
                                      // Calculate growth rate
                                      const marginGrowthRate =
                                        previousYearMargin > 0
                                          ? currentMargin / previousYearMargin -
                                            1
                                          : 0;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              marginGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(marginGrowthRate * 100).toFixed(
                                              1,
                                            )}
                                            %
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Adjusted Gross Profit Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Adjusted Gross Profit Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Calculate adjusted profit growth rate for this tier
                                      const profitGrowthRate =
                                        calculateAdjustedGrossProfitGrowthRate(tier);
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              profitGrowthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {formatPercentage(profitGrowthRate)}
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Total Incentive Cost */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Total Incentive Cost
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(
                                      dealCalculations.getPreviousYearIncentiveCost(),
                                    )}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      const incentiveCost =
                                        calculateTierIncentiveCost(
                                          tier.tierNumber,
                                        );
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          {formatCurrency(incentiveCost)}
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Total Client Value */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Total Client Value
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    {formatCurrency(850000 * 0.4)} {/* 40% of last year's revenue */}
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Using a fixed calculation for client value as 40% of revenue
                                      const clientValue =
                                        (tier.annualRevenue || 0) * 0.4;
                                      
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          {formatCurrency(clientValue)}
                                        </td>
                                      );
                                    })}
                                </tr>

                                {/* Client Value Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Client Value Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Using a fixed calculation for client value as 40% of revenue
                                      const clientValue =
                                        (tier.annualRevenue || 0) * 0.4;
                                      const lastYearValue = 850000 * 0.4; // 40% of last year's revenue
                                      const growthRate =
                                        clientValue / lastYearValue - 1;

                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              growthRate > 0
                                                ? "text-green-600"
                                                : "text-red-600"
                                            }
                                          >
                                            {(growthRate * 100).toFixed(1)}%
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>
                                
                                {/* Incentive Cost Growth Rate */}
                                <tr>
                                  <td className="p-2 border border-slate-200 font-medium">
                                    Incentive Cost Growth Rate
                                  </td>
                                  <td className="p-2 border border-slate-200 text-center">
                                    --
                                  </td>
                                  {dealTiers
                                    .filter((tier) => tier.annualRevenue)
                                    .map((tier) => {
                                      // Get previous year incentive cost
                                      const previousYearCost = dealCalculations.getPreviousYearIncentiveCost();
                                      // Calculate current tier incentive cost
                                      const currentCost = calculateTierIncentiveCost(tier.tierNumber);
                                      // Calculate growth rate
                                      const costGrowthRate = 
                                        previousYearCost > 0 
                                          ? currentCost / previousYearCost - 1 
                                          : 0;
                                          
                                      return (
                                        <td
                                          key={tier.tierNumber}
                                          className="p-2 border border-slate-200 text-center"
                                        >
                                          <span
                                            className={
                                              costGrowthRate > 0
                                                ? "text-red-600"  // Higher cost is shown in red
                                                : "text-green-600" // Lower cost is shown in green
                                            }
                                          >
                                            {(costGrowthRate * 100).toFixed(1)}%
                                          </span>
                                        </td>
                                      );
                                    })}
                                </tr>
                              </tbody>
                            </table>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* DealGenie AI Assessment */}
                  <div className="border border-slate-200 rounded-lg overflow-hidden bg-gradient-to-r from-purple-50 to-slate-50">
                    <div className="px-4 py-3 bg-gradient-to-r from-purple-100 to-slate-100 border-b border-slate-200 flex items-center justify-between">
                      <h3 className="text-sm font-semibold text-slate-800 flex items-center">
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          className="h-5 w-5 mr-2 text-purple-600"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"
                          />
                        </svg>
                        DealGenie AI Assessment
                      </h3>
                      <span className="inline-flex items-center rounded-full bg-purple-100 px-2.5 py-0.5 text-xs font-medium text-purple-800">
                        AI-Powered
                      </span>
                    </div>
                    <div className="p-5">
                      {/* AI Analysis Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-yellow-400 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Deal Classification
                          </h4>
                        </div>
                        <div className="flex items-center mb-4">
                          <span className="inline-flex items-center rounded-full bg-yellow-50 px-3 py-1 text-sm font-medium text-yellow-800 mr-3">
                            Non-Standard Deal
                          </span>
                          <span className="text-sm text-slate-500">
                            Manual review required
                          </span>
                        </div>
                        <p className="text-sm text-slate-700 mb-3">
                          This deal falls outside standard guidelines for the
                          following reasons:
                        </p>
                        <ul className="list-disc pl-5 text-sm text-slate-700 space-y-1 mb-3">
                          <li>
                            Incentive structure exceeds standard thresholds
                          </li>
                          <li>
                            Tiered revenue structure with potential margin
                            impact
                          </li>
                          <li>
                            Growth rate projections exceed benchmark ranges
                          </li>
                        </ul>
                      </div>

                      {/* AI Insights Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-purple-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Deal Structure Analysis
                          </h4>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                          <div className="p-3 bg-slate-50 rounded-md">
                            <div className="text-sm font-medium text-slate-700 mb-1">
                              Profitability Impact
                            </div>
                            <div className="text-xl font-semibold">
                              {(() => {
                                // Use the first tier's profit growth rate calculation
                                if (
                                  dealTiers.length > 0 &&
                                  dealTiers[0].annualRevenue
                                ) {
                                  const profitGrowthRate =
                                    calculateAdjustedGrossProfitGrowthRate(
                                      dealTiers[0],
                                    );
                                  const formattedRate = (
                                    profitGrowthRate * 100
                                  ).toFixed(1);
                                  const isPositive = profitGrowthRate > 0;
                                  return (
                                    <span
                                      className={
                                        isPositive
                                          ? "text-green-600"
                                          : "text-red-600"
                                      }
                                    >
                                      {isPositive ? "+" : ""}
                                      {formattedRate}%
                                    </span>
                                  );
                                }
                                return (
                                  <span className="text-slate-700">N/A</span>
                                );
                              })()}
                            </div>
                            <div className="text-xs text-slate-500">
                              vs. Last Year
                            </div>
                          </div>
                          <div className="p-3 bg-slate-50 rounded-md">
                            <div className="text-sm font-medium text-slate-700 mb-1">
                              Revenue Growth
                            </div>
                            <div className="text-xl font-semibold">
                              {(() => {
                                // Use the first tier's revenue growth rate calculation - using the correct growth function
                                if (
                                  dealTiers.length > 0 &&
                                  dealTiers[0].annualRevenue
                                ) {
                                  // Get previous year revenue
                                  let previousYearRevenue = 850000; // Default to mock value
                                  const salesChannel =
                                    form.watch("salesChannel");
                                  const advertiserName =
                                    form.watch("advertiserName");
                                  const agencyName = form.watch("agencyName");

                                  if (
                                    salesChannel === "client_direct" &&
                                    advertiserName
                                  ) {
                                    const advertiser = advertisers.find(
                                      (a) => a.name === advertiserName,
                                    );
                                    if (
                                      advertiser &&
                                      advertiser.previousYearRevenue
                                    ) {
                                      previousYearRevenue =
                                        advertiser.previousYearRevenue;
                                    }
                                  } else if (
                                    (salesChannel === "holding_company" ||
                                      salesChannel === "independent_agency") &&
                                    agencyName
                                  ) {
                                    const agency = agencies.find(
                                      (a) => a.name === agencyName,
                                    );
                                    if (agency && agency.previousYearRevenue) {
                                      previousYearRevenue =
                                        agency.previousYearRevenue;
                                    }
                                  }

                                  // Calculate growth rate
                                  const revenueGrowthRate =
                                    previousYearRevenue > 0 &&
                                    dealTiers[0].annualRevenue
                                      ? dealTiers[0].annualRevenue /
                                          previousYearRevenue -
                                        1
                                      : 0;

                                  const formattedRate = (
                                    revenueGrowthRate * 100
                                  ).toFixed(1);
                                  const isPositive = revenueGrowthRate > 0;
                                  return (
                                    <span
                                      className={
                                        isPositive
                                          ? "text-green-600"
                                          : "text-red-600"
                                      }
                                    >
                                      {isPositive ? "+" : ""}
                                      {formattedRate}%
                                    </span>
                                  );
                                }
                                return (
                                  <span className="text-slate-700">N/A</span>
                                );
                              })()}
                            </div>
                            <div className="text-xs text-slate-500">
                              vs. Last Year
                            </div>
                          </div>
                        </div>
                        <p className="text-sm text-slate-700">
                          {(() => {
                            if (
                              dealTiers.length > 0 &&
                              dealTiers[0].annualRevenue
                            ) {
                              const profitGrowthRate =
                                calculateAdjustedGrossProfitGrowthRate(
                                  dealTiers[0],
                                );

                              // Get previous year revenue for actual revenue growth calculation
                              let previousYearRevenue = 850000; // Default to mock value
                              const salesChannel = form.watch("salesChannel");
                              const advertiserName =
                                form.watch("advertiserName");
                              const agencyName = form.watch("agencyName");

                              if (
                                salesChannel === "client_direct" &&
                                advertiserName
                              ) {
                                const advertiser = advertisers.find(
                                  (a) => a.name === advertiserName,
                                );
                                if (
                                  advertiser &&
                                  advertiser.previousYearRevenue
                                ) {
                                  previousYearRevenue =
                                    advertiser.previousYearRevenue;
                                }
                              } else if (
                                (salesChannel === "holding_company" ||
                                  salesChannel === "independent_agency") &&
                                agencyName
                              ) {
                                const agency = agencies.find(
                                  (a) => a.name === agencyName,
                                );
                                if (agency && agency.previousYearRevenue) {
                                  previousYearRevenue =
                                    agency.previousYearRevenue;
                                }
                              }

                              // Calculate actual revenue growth rate
                              const revenueGrowthRate =
                                previousYearRevenue > 0 &&
                                dealTiers[0].annualRevenue
                                  ? dealTiers[0].annualRevenue /
                                      previousYearRevenue -
                                    1
                                  : 0;

                              if (
                                revenueGrowthRate > 0 &&
                                profitGrowthRate < 0
                              ) {
                                return "The proposed structure offers higher revenue growth but with reduced profitability compared to standard deals. Consider adjusting tier thresholds or incentive amounts.";
                              } else if (
                                revenueGrowthRate > 0 &&
                                profitGrowthRate > 0
                              ) {
                                return "This deal structure shows positive growth in both revenue and profitability, though the approval matrix indicates additional oversight required.";
                              } else if (revenueGrowthRate < 0) {
                                return "This deal structure shows a revenue decrease compared to last year. Recommend revisiting revenue targets before submission.";
                              }
                            }

                            return "Unable to analyze deal structure with the current data. Please ensure all tier values are completed.";
                          })()}
                        </p>
                      </div>

                      {/* Approval Workflow Section */}
                      <div className="mb-6 bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-blue-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Required Approval Workflow
                          </h4>
                        </div>
                        <div className="flex flex-wrap gap-2 mb-3">
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"
                              />
                            </svg>
                            Finance Team
                          </div>
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                              />
                            </svg>
                            Regional Director
                          </div>
                          <div className="inline-flex items-center rounded-full bg-blue-50 px-3 py-1 text-xs font-medium text-blue-700">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-3.5 w-3.5 mr-1"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                              />
                            </svg>
                            Legal Review
                          </div>
                        </div>
                        <div className="text-sm text-slate-700">
                          <p>
                            Estimated approval time:{" "}
                            <span className="font-medium">
                              3-5 business days
                            </span>
                          </p>
                        </div>
                      </div>

                      {/* Recommendations Section */}
                      <div className="bg-white p-4 rounded-lg border border-slate-200 shadow-sm">
                        <div className="flex items-center mb-3">
                          <div className="w-2 h-6 bg-green-500 rounded-full mr-3"></div>
                          <h4 className="font-medium text-slate-800">
                            Recommendations
                          </h4>
                        </div>
                        <ul className="space-y-2">
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Consider adjusting Tier 1 incentive to stay within
                              standard margin parameters
                            </span>
                          </li>
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Include a quarterly performance review clause to
                              re-evaluate tiers
                            </span>
                          </li>
                          <li className="flex items-start">
                            <svg
                              xmlns="http://www.w3.org/2000/svg"
                              className="h-5 w-5 text-green-500 mr-2 flex-shrink-0 mt-0.5"
                              fill="none"
                              viewBox="0 0 24 24"
                              stroke="currentColor"
                            >
                              <path
                                strokeLinecap="round"
                                strokeLinejoin="round"
                                strokeWidth={2}
                                d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                              />
                            </svg>
                            <span className="text-sm text-slate-700">
                              Prepare detailed business justification for
                              non-standard incentive structure
                            </span>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="mt-8 flex justify-between">
                  <Button type="button" variant="outline" onClick={prevStep}>
                    Previous: Deal Structure
                  </Button>
                  <Button 
                    type="button" 
                    disabled={submitDealMutation.isPending}
                    onClick={() => {
                      console.log("Submit button clicked");
                      
                      // Generate a sample deal submission
                      const formValues = form.getValues();
                      
                      // Set a sample deal name for testing
                      const dealName = "Test Deal " + new Date().toISOString();
                      
                      // Use actual form dates (they should be properly set by now)
                      const startDate = formValues.termStartDate || new Date();
                      const endDate = formValues.termEndDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);

                      // Create a complete object with all required fields
                      const dealData = {
                        dealName,
                        dealType: formValues.dealType || "grow",
                        region: formValues.region || "midwest", 
                        salesChannel: formValues.salesChannel || "independent_agency",
                        businessSummary: formValues.businessSummary || "Test business summary",
                        advertiserName: formValues.advertiserName || "Test Advertiser",
                        agencyName: formValues.agencyName || "Test Agency",
                        termStartDate: startDate,
                        termEndDate: endDate,
                        annualRevenue: Number(formValues.annualRevenue) || 0,
                        annualGrossMargin: Number(formValues.annualGrossMargin) || 0,
                        dealStructure: dealStructureType || "tiered",
                        dealTiers: dealTiers,
                        selectedIncentives: selectedIncentives,
                        tierIncentives: tierIncentives,
                        status: "pending_approval"
                      };
                      
                      // Submit directly to the API
                      try {
                        console.log("Submitting deal data:", dealData);
                        submitDealMutation.mutate(dealData);
                        toast({
                          title: "Deal Submitted",
                          description: "Your deal has been submitted for approval",
                        });
                      } catch (error) {
                        console.error("Error submitting deal:", error);
                        toast({
                          title: "Submission Error",
                          description: "There was an error submitting your deal. Please try again.",
                          variant: "destructive",
                        });
                      }
                    }}
                  >
                    {submitDealMutation.isPending
                      ? "Submitting..."
                      : "Submit Deal for Approval"}
                  </Button>
                </div>
              </CardContent>
            )}
          </form>
        </Form>
      </Card>
    </div>
  );
}
